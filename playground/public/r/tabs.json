{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "title": "Tabs",
  "dependencies": [],
  "files": [
    {
      "path": "src/components/tabs/Tabs.tsx",
      "content": "'use client';\nimport { forwardRef } from 'react';\n\nimport TabsContent from './TabsContent';\nimport TabsList from './TabsList';\nimport Root from './TabsRoot';\nimport TabsTrigger from './TabsTrigger';\nimport type { TabsOptionData, TabsProps } from './types';\n\nconst Tabs = forwardRef<React.ElementRef<typeof Root>, TabsProps<TabsOptionData>>((props, ref) => {\n  const {\n    className,\n    classNames,\n    dir,\n    enableIndicator = true,\n    forceMountContent,\n    items,\n    loop,\n    orientation = 'horizontal',\n    size,\n    value,\n    ...rest\n  } = props;\n\n  return (\n    <Root\n      className={[className, classNames?.root]}\n      dir={dir}\n      ref={ref}\n      size={size}\n      value={value}\n      {...rest}\n    >\n      <TabsList\n        className={classNames?.list}\n        dir={dir}\n        enableIndicator={enableIndicator}\n        loop={loop}\n        orientation={orientation}\n        size={size}\n        value={value}\n        classNames={{\n          indicator: classNames?.indicator,\n          indicatorRoot: classNames?.indicatorRoot\n        }}\n      >\n        {items.map(item => (\n          <TabsTrigger\n            className={classNames?.trigger}\n            dir={dir}\n            disabled={item.disabled}\n            enableIndicator={enableIndicator}\n            key={item.value}\n            size={size}\n            value={item.value}\n          >\n            {item.label}\n          </TabsTrigger>\n        ))}\n      </TabsList>\n      {items.map(item => (\n        <TabsContent\n          className={classNames?.content}\n          dir={dir}\n          forceMount={forceMountContent}\n          key={item.value}\n          orientation={orientation}\n          size={size}\n          value={item.value}\n        >\n          {typeof item.children === 'function' ? item.children({ active: item.value === value, item }) : item.children}\n        </TabsContent>\n      ))}\n    </Root>\n  );\n});\n\nTabs.displayName = 'Tabs';\n\nexport default Tabs;\n",
      "type": "registry:ui",
      "target": "components/tabs/Tabs.tsx"
    },
    {
      "path": "src/components/tabs/TabsContent.tsx",
      "content": "import { TabsContent as Content } from '@radix-ui/react-tabs';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { tabsVariants } from './tabs-variants';\nimport type { TabsContentProps } from './types';\n\nconst TabsContent = forwardRef<React.ElementRef<typeof Content>, TabsContentProps>((props, ref) => {\n  const { className, orientation, size, ...rest } = props;\n\n  const { content } = tabsVariants({ orientation, size });\n\n  const mergedCls = cn(content(), className);\n\n  return (\n    <Content\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nTabsContent.displayName = 'TabsContent';\n\nexport default TabsContent;\n",
      "type": "registry:ui",
      "target": "components/tabs/TabsContent.tsx"
    },
    {
      "path": "src/components/tabs/TabsList.tsx",
      "content": "'use client';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { List } from '@radix-ui/react-tabs';\nimport type { CSSProperties } from 'react';\nimport { forwardRef, useEffect, useRef, useState } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { If } from '../if';\n\nimport { tabsVariants } from './tabs-variants';\nimport type { IndicatorStyle, TabsListProps } from './types';\n\nconst TabsList = forwardRef<React.ElementRef<typeof List>, TabsListProps>((props, ref) => {\n  const { children, className, classNames, dir, enableIndicator, orientation, size, value, ...rest } = props;\n\n  const tabsListRef = useRef<HTMLDivElement>(null);\n\n  const [indicatorStyle, setIndicatorStyle] = useState<IndicatorStyle>({\n    position: null,\n    size: null\n  });\n\n  const mergedRef = useComposedRefs(ref, tabsListRef);\n\n  const { indicator, indicatorRoot, list } = tabsVariants({ orientation, size });\n\n  const mergedCls = cn(list(), className);\n\n  const mergedRootCls = cn(indicatorRoot(), classNames?.indicatorRoot);\n\n  const mergedIndicatorCls = cn(indicator(), classNames?.indicator);\n\n  function updateIndicatorStyle() {\n    const activeTab = tabsListRef.current?.querySelector<HTMLButtonElement>('[role=\"tab\"][data-state=\"active\"]');\n\n    if (!activeTab) return;\n\n    if (orientation === 'horizontal') {\n      setIndicatorStyle({\n        position: activeTab.offsetLeft,\n        size: activeTab.offsetWidth\n      });\n    } else {\n      setIndicatorStyle({\n        position: activeTab.offsetTop,\n        size: activeTab.offsetHeight\n      });\n    }\n  }\n\n  useEffect(() => {\n    updateIndicatorStyle();\n  }, [value, dir]);\n  return (\n    <List\n      className={mergedCls}\n      dir={dir}\n      {...rest}\n      ref={mergedRef}\n    >\n      {children}\n\n      <If condition={Boolean(enableIndicator)}>\n        <div\n          className={mergedRootCls}\n          style={\n            {\n              '--soybean-tabs-indicator-position': `${indicatorStyle.position}px`,\n              '--soybean-tabs-indicator-size': `${indicatorStyle.size}px`\n            } as CSSProperties\n          }\n        >\n          <div className={mergedIndicatorCls} />\n        </div>\n      </If>\n    </List>\n  );\n});\n\nTabsList.displayName = 'TabsList';\n\nexport default TabsList;\n",
      "type": "registry:ui",
      "target": "components/tabs/TabsList.tsx"
    },
    {
      "path": "src/components/tabs/TabsRoot.tsx",
      "content": "import { Root } from '@radix-ui/react-tabs';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { tabsVariants } from './tabs-variants';\nimport type { TabsRootProps } from './types';\n\nconst TabRoot = forwardRef<React.ElementRef<typeof Root>, TabsRootProps>((props, ref) => {\n  const { className, fill, orientation, size, ...rest } = props;\n\n  const { root } = tabsVariants({ fill, orientation, size });\n\n  const mergedCls = cn(root(), className);\n\n  return (\n    <Root\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nTabRoot.displayName = 'TabRoot';\n\nexport default TabRoot;\n",
      "type": "registry:ui",
      "target": "components/tabs/TabsRoot.tsx"
    },
    {
      "path": "src/components/tabs/TabsTrigger.tsx",
      "content": "import { Trigger } from '@radix-ui/react-tabs';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { tabsVariants } from './tabs-variants';\nimport type { TabsTriggerProps } from './types';\n\nconst TabsTrigger = forwardRef<React.ElementRef<typeof Trigger>, TabsTriggerProps>((props, ref) => {\n  const { className, enableIndicator = true, size, ...rest } = props;\n\n  const { trigger } = tabsVariants({ enableIndicator, size });\n\n  const mergedCls = cn(trigger(), className);\n\n  return (\n    <Trigger\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nTabsTrigger.displayName = 'TabsTrigger';\n\nexport default TabsTrigger;\n",
      "type": "registry:ui",
      "target": "components/tabs/TabsTrigger.tsx"
    },
    {
      "path": "src/components/tabs/index.ts",
      "content": "export { default as Tabs } from './Tabs';\nexport { default as TabsContent } from './TabsContent';\nexport { default as TabsList } from './TabsList';\nexport { default as TabsRoot } from './TabsRoot';\nexport { default as TabsTrigger } from './TabsTrigger';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/tabs/index.ts"
    },
    {
      "path": "src/components/tabs/tabs-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\nimport type { VariantProps } from 'tailwind-variants';\n\nexport const tabsVariants = tv({\n  compoundVariants: [\n    { class: { content: 'mt-1.5', indicatorRoot: 'py-0.75' }, orientation: 'horizontal', size: 'xs' },\n    { class: { content: 'ml-1.5', indicatorRoot: 'px-0.75' }, orientation: 'vertical', size: 'xs' },\n    { class: { content: 'mt-1.75', indicatorRoot: 'py-1' }, orientation: 'horizontal', size: 'sm' },\n    { class: { content: 'ml-1.75', indicatorRoot: 'px-1' }, orientation: 'vertical', size: 'sm' },\n    { class: { content: 'mt-2', indicatorRoot: 'py-1' }, orientation: 'horizontal', size: 'md' },\n    { class: { content: 'ml-2', indicatorRoot: 'px-1' }, orientation: 'vertical', size: 'md' },\n    { class: { content: 'mt-2.5', indicatorRoot: 'py-1.125' }, orientation: 'horizontal', size: 'lg' },\n    { class: { content: 'ml-2.5', indicatorRoot: 'px-1.125' }, orientation: 'vertical', size: 'lg' },\n    { class: { content: 'mt-3', indicatorRoot: 'py-1.25' }, orientation: 'horizontal', size: 'xl' },\n    { class: { content: 'ml-3', indicatorRoot: 'px-1.25' }, orientation: 'vertical', size: 'xl' },\n    { class: { content: 'mt-3.5', indicatorRoot: 'py-1.5' }, orientation: 'horizontal', size: '2xl' },\n    { class: { content: 'ml-3.5', indicatorRoot: 'px-1.5' }, orientation: 'vertical', size: '2xl' }\n  ],\n  defaultVariants: {\n    enableIndicator: true,\n    fill: 'auto',\n    orientation: 'horizontal',\n    size: 'md'\n  },\n  slots: {\n    content: `flex-grow self-stretch overflow-hidden focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-background focus-visible:ring-primary`,\n    indicator: `size-full rounded-md bg-background shadow`,\n    indicatorRoot: `absolute top-0 left-0 z-2 transition-all duration-300`,\n    list: 'relative inline-flex justify-center items-center rounded-md bg-muted text-muted-foreground',\n    root: `flex`,\n    trigger: [\n      `relative z-3 inline-flex items-center justify-center flex-1 whitespace-nowrap rounded-md font-medium ease-in transition-all duration-200`,\n      `focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-background focus-visible:ring-primary`,\n      `disabled:pointer-events-none disabled:opacity-50`\n    ]\n  },\n  variants: {\n    enableIndicator: {\n      false: {\n        trigger: `data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow`\n      }\n    },\n    fill: {\n      auto: {\n        root: `items-start`\n      },\n      full: {\n        root: `items-stretch`\n      }\n    },\n    orientation: {\n      horizontal: {\n        indicatorRoot: `h-full w-(--soybean-tabs-indicator-size) translate-x-(--soybean-tabs-indicator-position)`,\n        root: `flex-col`\n      },\n      vertical: {\n        indicatorRoot: `w-full h-(--soybean-tabs-indicator-size) translate-y-(--soybean-tabs-indicator-position)`,\n        list: `flex-col`\n      }\n    },\n    size: {\n      '2xl': {\n        list: `p-1.5`,\n        root: 'text-xl',\n        trigger: `gap-4 px-6 py-1.5`\n      },\n      lg: {\n        list: `p-1.125`,\n        root: 'text-base',\n        trigger: `gap-2.5 px-4 py-1.125`\n      },\n      md: {\n        list: `p-1`,\n        root: 'text-sm',\n        trigger: `gap-2 px-3 py-1`\n      },\n      sm: {\n        list: `p-0.875`,\n        root: 'text-xs',\n        trigger: `gap-1.5 px-2 py-1`\n      },\n      xl: {\n        list: `p-1.25`,\n        root: 'text-lg',\n        trigger: `gap-3 px-5 py-1.25`\n      },\n      xs: {\n        list: `p-0.75`,\n        root: 'text-2xs',\n        trigger: `gap-1 px-1.5 py-0.75`\n      }\n    }\n  }\n});\n\nexport type TabsSlots = keyof typeof tabsVariants.slots;\nexport type TabsProps = VariantProps<typeof tabsVariants>;\nexport type TabsFill = NonNullable<TabsProps['fill']>;\n",
      "type": "registry:ui",
      "target": "components/tabs/tabs-variants.ts"
    },
    {
      "path": "src/components/tabs/types.ts",
      "content": "import type {\n  TabsContentProps as _TabsContentProps,\n  TabsListProps as _TabsListProps,\n  TabsProps as _TabsRootProps,\n  TabsTriggerProps as _TabsTriggerProps\n} from '@radix-ui/react-tabs';\n\nimport type { BaseProps, ClassValue, ThemeOrientation } from '@/types/other';\n\nimport type { TabsFill, TabsSlots } from './tabs-variants';\n\nexport interface IndicatorStyle {\n  position: number | null;\n  size: number | null;\n}\n\nexport type TabsUi = Partial<Record<TabsSlots, ClassValue>>;\n\nexport interface TabsRootProps extends BaseProps<Omit<_TabsRootProps, 'className'>> {\n  fill?: TabsFill;\n}\n\nexport interface TabsListProps extends BaseProps<Omit<_TabsListProps, 'className'>>, Pick<_TabsRootProps, 'value'> {\n  classNames?: Pick<TabsUi, 'indicator' | 'indicatorRoot'>;\n  enableIndicator?: boolean;\n  orientation?: ThemeOrientation;\n}\n\nexport interface TabsTriggerProps extends BaseProps<Omit<_TabsTriggerProps, 'className'>> {\n  enableIndicator?: boolean;\n}\n\nexport interface TabsContentProps extends BaseProps<Omit<_TabsContentProps, 'className'>> {\n  orientation?: ThemeOrientation;\n}\n\nexport type TabsOptionData = Pick<TabsTriggerProps, 'disabled'> & {\n  children: React.ReactNode | ((props: { active: boolean; item: TabsOptionData }) => React.ReactNode);\n  label: React.ReactNode;\n  value: string;\n};\n\nexport type TabsProps<T extends TabsOptionData> = TabsRootProps &\n  TabsListProps & {\n    classNames?: TabsUi;\n    enableIndicator?: boolean;\n    forceMountContent?: true;\n    items: T[];\n  };\n",
      "type": "registry:ui",
      "target": "components/tabs/types.ts"
    }
  ]
}