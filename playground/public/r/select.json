{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:block",
  "title": "Select",
  "files": [
    {
      "path": "src/components/select/Select.tsx",
      "content": "import { Root } from '@radix-ui/react-select';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport SelectContent from './SelectContent';\nimport SelectOption from './SelectOption';\nimport SelectTrigger from './SelectTrigger';\nimport type { SelectProps } from './types';\n\nconst Select = forwardRef<ComponentRef<typeof SelectContent>, SelectProps>((props, ref) => {\n  const { classNames, contentProps, indicatorIcon, items, size, triggerProps, ...rest } = props;\n\n  return (\n    <Root\n      data-slot=\"select-root\"\n      {...rest}\n    >\n      <SelectTrigger {...triggerProps} />\n\n      <SelectContent\n        classNames={classNames}\n        ref={ref}\n        {...contentProps}\n      >\n        {items.map((item, index) => (\n          <SelectOption\n            classNames={classNames}\n            indicatorIcon={indicatorIcon}\n            item={item}\n            key={String(index)}\n            size={size}\n          />\n        ))}\n      </SelectContent>\n    </Root>\n  );\n});\n\nSelect.displayName = 'Select';\n\nexport default Select;\n",
      "type": "registry:ui",
      "target": "components/select/Select.tsx"
    },
    {
      "path": "src/components/select/SelectContent.tsx",
      "content": "import { Content, Portal, ScrollDownButton, ScrollUpButton, Viewport } from '@radix-ui/react-select';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { selectVariants } from './select-variants';\nimport type { SelectContentProps } from './types';\n\nconst SelectContent = forwardRef<ComponentRef<typeof Content>, SelectContentProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    position = 'popper',\n    scrollDownButton,\n    scrollUpButton,\n    size,\n    ...rest\n  } = props;\n\n  const {\n    content,\n    scrollDownButton: scrollDownButtonCls,\n    scrollUpButton: scrollUpButtonCls,\n    viewport: viewportCls\n  } = selectVariants({ position, size });\n\n  const mergedCls = {\n    contentCls: cn(content(), className || classNames?.content),\n    scrollDownButtonCls: cn(scrollDownButtonCls(), classNames?.scrollDownButton),\n    scrollUpButtonCls: cn(scrollUpButtonCls(), classNames?.scrollUpButton),\n    viewportCls: cn(viewportCls(), classNames?.viewport)\n  };\n\n  return (\n    <Portal>\n      <Content\n        {...rest}\n        className={mergedCls.contentCls}\n        data-slot=\"select-content\"\n        position={position}\n        ref={ref}\n      >\n        <ScrollUpButton\n          asChild\n          className={mergedCls.scrollUpButtonCls}\n          data-slot=\"scroll-up-button\"\n        >\n          {scrollUpButton || <ChevronUp />}\n        </ScrollUpButton>\n\n        <Viewport\n          className={mergedCls.viewportCls}\n          data-slot=\"viewport\"\n        >\n          {children}\n        </Viewport>\n\n        <ScrollDownButton\n          asChild\n          className={mergedCls.scrollDownButtonCls}\n          data-slot=\"scroll-down-button\"\n        >\n          {scrollDownButton || <ChevronDown />}\n        </ScrollDownButton>\n      </Content>\n    </Portal>\n  );\n});\n\nSelectContent.displayName = Content.displayName;\n\nexport default SelectContent;\n",
      "type": "registry:ui",
      "target": "components/select/SelectContent.tsx"
    },
    {
      "path": "src/components/select/SelectItem.tsx",
      "content": "import { Item, ItemIndicator, ItemText } from '@radix-ui/react-select';\nimport { Check } from 'lucide-react';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { selectVariants } from './select-variants';\nimport type { SelectItemProps } from './types';\n\nconst SelectItem = forwardRef<ComponentRef<typeof Item>, SelectItemProps>((props, ref) => {\n  const { children, className, classNames, indicatorIcon, leading, size, trailing, ...rest } = props;\n\n  const { item, itemIndicator } = selectVariants({ size });\n\n  const mergedCls = {\n    itemCls: cn(item(), className || classNames?.item),\n    itemIndicatorCls: cn(itemIndicator(), classNames?.itemIndicator)\n  };\n\n  return (\n    <Item\n      {...rest}\n      className={mergedCls.itemCls}\n      data-slot=\"select-item\"\n      ref={ref}\n    >\n      {leading}\n\n      <ItemText data-slot=\"select-item-text\">{children}</ItemText>\n\n      {trailing}\n\n      <ItemIndicator\n        asChild\n        className={mergedCls.itemIndicatorCls}\n        data-slot=\"select-item-indicator\"\n      >\n        {indicatorIcon || <Check />}\n      </ItemIndicator>\n    </Item>\n  );\n});\n\nSelectItem.displayName = 'SelectItem';\n\nexport default SelectItem;\n",
      "type": "registry:ui",
      "target": "components/select/SelectItem.tsx"
    },
    {
      "path": "src/components/select/SelectLabel.tsx",
      "content": "import { Label } from '@radix-ui/react-select';\n\nimport { cn } from '@/lib/utils';\n\nimport { selectVariants } from './select-variants';\nimport type { SelectLabelProps } from './types';\n\nconst SelectLabel = (props: SelectLabelProps) => {\n  const { className, size, ...rest } = props;\n\n  const { groupLabel } = selectVariants({ size });\n\n  const mergedCls = cn(groupLabel(), className);\n\n  return (\n    <Label\n      className={mergedCls}\n      data-slot=\"select-group-label\"\n      {...rest}\n    />\n  );\n};\n\nexport default SelectLabel;\n",
      "type": "registry:ui",
      "target": "components/select/SelectLabel.tsx"
    },
    {
      "path": "src/components/select/SelectOption.tsx",
      "content": "import { Group } from '@radix-ui/react-select';\n\nimport SelectItem from './SelectItem';\nimport SelectLabel from './SelectLabel';\nimport SelectSeparator from './SelectSeparator';\nimport { isGroup, isSeparator } from './shared';\nimport type { SelectOptionProps } from './types';\n\nconst SelectOption = (props: SelectOptionProps) => {\n  const { classNames, indicatorIcon, item, size } = props;\n\n  if (isSeparator(item)) {\n    return (\n      <SelectSeparator\n        className={classNames?.separator}\n        size={size}\n        {...item}\n      />\n    );\n  }\n\n  if (isGroup(item)) {\n    const { children, label, ...rest } = item;\n    return (\n      <Group>\n        <SelectLabel\n          {...rest}\n          className={classNames?.groupLabel}\n        >\n          {label}\n        </SelectLabel>\n\n        {children.map(({ label: childLabel, ...childRest }) => (\n          <SelectItem\n            classNames={classNames}\n            indicatorIcon={indicatorIcon}\n            key={childRest.value}\n            size={size}\n            {...childRest}\n          >\n            {childLabel}\n          </SelectItem>\n        ))}\n      </Group>\n    );\n  }\n\n  const { label, ...rest } = item;\n\n  return (\n    <SelectItem\n      classNames={classNames}\n      indicatorIcon={indicatorIcon}\n      size={size}\n      {...rest}\n    >\n      {label}\n    </SelectItem>\n  );\n};\n\nexport default SelectOption;\n",
      "type": "registry:ui",
      "target": "components/select/SelectOption.tsx"
    },
    {
      "path": "src/components/select/SelectSeparator.tsx",
      "content": "import { Separator } from '@radix-ui/react-select';\n\nimport { cn } from '@/lib/utils';\n\nimport { selectVariants } from './select-variants';\nimport type { SelectSeparatorProps } from './types';\n\nconst SelectSeparator = (props: SelectSeparatorProps) => {\n  const { className, size, ...rest } = props;\n\n  const { separator } = selectVariants({ size });\n\n  const mergedCls = cn(separator(), className);\n\n  return (\n    <Separator\n      className={mergedCls}\n      data-slot=\"select-separator\"\n      {...rest}\n    />\n  );\n};\n\nexport default SelectSeparator;\n",
      "type": "registry:ui",
      "target": "components/select/SelectSeparator.tsx"
    },
    {
      "path": "src/components/select/SelectTrigger.tsx",
      "content": "import { Icon, Trigger, Value } from '@radix-ui/react-select';\nimport { ChevronsUpDown } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nimport { selectVariants } from './select-variants';\nimport type { SelectTriggerProps } from './types';\n\nconst SelectTrigger = (props: SelectTriggerProps) => {\n  const { children, className, classNames, leading, placeholder, size, trailing, triggerIcon, ...rest } = props;\n\n  const { trigger, triggerIcon: triggerIconCls } = selectVariants({ size });\n\n  const mergedCls = {\n    triggerCls: cn(trigger(), className || classNames?.trigger),\n    triggerIconCls: cn(triggerIconCls(), classNames?.triggerIcon)\n  };\n\n  return (\n    <Trigger\n      {...rest}\n      className={mergedCls.triggerCls}\n      data-slot=\"select-trigger\"\n    >\n      {leading}\n\n      <Value\n        asChild={Boolean(children)}\n        className={cn(classNames?.selectedValue)}\n        data-slot=\"select-trigger-value\"\n        placeholder={placeholder}\n      >\n        {children}\n      </Value>\n\n      {trailing}\n\n      <Icon\n        asChild\n        className={mergedCls.triggerIconCls}\n        data-slot=\"select-trigger-icon\"\n      >\n        {triggerIcon || <ChevronsUpDown />}\n      </Icon>\n    </Trigger>\n  );\n};\n\nexport default SelectTrigger;\n",
      "type": "registry:ui",
      "target": "components/select/SelectTrigger.tsx"
    },
    {
      "path": "src/components/select/index.ts",
      "content": "export { default as Select } from './Select';\nexport { default as SelectContent } from './SelectContent';\nexport { default as SelectItem } from './SelectItem';\nexport { default as SelectLabel } from './SelectLabel';\nexport { default as SelectOption } from './SelectOption';\nexport { default as SelectSeparator } from './SelectSeparator';\nexport { default as SelectTrigger } from './SelectTrigger';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/select/index.ts"
    },
    {
      "path": "src/components/select/select-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\nimport type { VariantProps } from 'tailwind-variants';\n\nexport const selectVariants = tv({\n  defaultVariants: {\n    position: 'popper',\n    size: 'md'\n  },\n  slots: {\n    content: [\n      `relative z-50 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md`,\n      `data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95`,\n      `data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95`,\n      `data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2`\n    ],\n    group: '',\n    groupLabel: `font-semibold`,\n    item: [\n      `relative flex items-center w-full rounded-sm outline-none cursor-pointer select-none`,\n      `focus:bg-accent focus:text-accent-foreground `,\n      `data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[disabled]:cursor-not-allowed`\n    ],\n    itemIndicator: `ml-auto shrink-0 text-muted-foreground`,\n    itemText: '',\n    scrollDownButton: `flex items-center justify-center cursor-default`,\n    scrollUpButton: `flex items-center justify-center cursor-default`,\n    selectedValue: '',\n    separator: `-mx-1 my-1 h-px bg-muted`,\n    trigger: [\n      `flex items-center justify-between w-full rounded-md border border-input bg-background [&_span]:truncate`,\n      `focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-background focus-visible:ring-primary`,\n      `focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background focus:ring-primary`,\n      `disabled:pointer-events-none disabled:opacity-50 disabled:cursor-not-allowed`,\n      `placeholder:text-muted-foreground data-[placeholder]:text-muted-foreground`\n    ],\n    triggerIcon: `shrink-0 text-muted-foreground opacity-70`,\n    viewport: ''\n  },\n  variants: {\n    position: {\n      'item-aligned': '',\n      popper: {\n        content: `data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1`,\n        viewport: `h-[var(--radix-select-trigger-height)] w-full  min-w-[var(--radix-select-trigger-width)]`\n      }\n    },\n    size: {\n      '2xl': {\n        content: 'max-h-115 text-xl',\n        groupLabel: 'p-3',\n        item: 'gap-3.5 px-3.5 py-2.5',\n        scrollDownButton: 'py-1.75',\n        scrollUpButton: 'py-1.75',\n        separator: '-mx-1.75 my-0.875',\n        trigger: 'h-12 px-4 text-xl',\n        viewport: 'p-1.75'\n      },\n      lg: {\n        content: 'max-h-90 text-base',\n        groupLabel: 'p-2',\n        item: 'gap-2.5 px-2.5 py-1.5',\n        scrollDownButton: 'py-1.25',\n        scrollUpButton: 'py-1.25',\n        separator: '-mx-1.25 my-0.625',\n        trigger: 'h-9 px-3 text-base',\n        viewport: 'p-1.25'\n      },\n      md: {\n        content: 'max-h-80 text-sm',\n        groupLabel: 'p-1.75',\n        item: 'gap-2 px-2 py-1.5',\n        scrollDownButton: 'py-1',\n        scrollUpButton: 'py-1',\n        separator: '-mx-1 my-0.5',\n        trigger: 'h-8 px-2.5 text-sm',\n        viewport: 'p-1'\n      },\n      sm: {\n        content: 'max-h-75 text-xs',\n        groupLabel: 'p-1.25',\n        item: 'gap-1.5 px-1.5 py-1',\n        scrollDownButton: 'py-0.875',\n        scrollUpButton: 'py-0.875',\n        separator: '-mx-0.875 my-0.4375',\n        trigger: 'h-7 px-2 text-xs',\n        viewport: 'p-0.875'\n      },\n      xl: {\n        content: 'max-h-100 text-lg',\n        groupLabel: 'p-2.5',\n        item: 'gap-3 px-3 py-2',\n        scrollDownButton: 'py-1.5',\n        scrollUpButton: 'py-1.5',\n        separator: '-mx-1.5 my-0.75',\n        trigger: 'h-10 px-3.5 text-lg',\n        viewport: 'p-1.5'\n      },\n      xs: {\n        content: 'max-h-70 text-2xs',\n        groupLabel: 'p-1',\n        item: 'gap-1 px-1 py-1',\n        scrollDownButton: 'py-0.75',\n        scrollUpButton: 'py-0.75',\n        separator: '-mx-0.75 my-0.375',\n        trigger: 'h-6 px-1.5 text-2xs',\n        viewport: 'p-0.75'\n      }\n    }\n  }\n});\n\ntype SelectVariants = VariantProps<typeof selectVariants>;\n\nexport type SelectPosition = NonNullable<SelectVariants['position']>;\n\nexport type SelectSlots = keyof typeof selectVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/select/select-variants.ts"
    },
    {
      "path": "src/components/select/shared.ts",
      "content": "import type { SelectGroupOptionData, SelectOptionItemData, SelectSeparatorOptionData } from './types';\n\nexport function isGroup(\n  opt: SelectOptionItemData | SelectSeparatorOptionData | SelectGroupOptionData\n): opt is SelectGroupOptionData {\n  return opt.type === 'group' || 'children' in opt;\n}\nexport function isSeparator(\n  opt: SelectOptionItemData | SelectSeparatorOptionData | SelectGroupOptionData\n): opt is SelectSeparatorOptionData {\n  return opt.type === 'separator';\n}\n",
      "type": "registry:ui",
      "target": "components/select/shared.ts"
    },
    {
      "path": "src/components/select/types.ts",
      "content": "import type {\n  SelectContentProps as _SelectContentProps,\n  SelectItemProps as _SelectItemProps,\n  SelectLabelProps as _SelectLabelProps,\n  SelectProps as _SelectProps,\n  SelectSeparatorProps as _SelectSeparatorProps,\n  SelectTriggerProps as _SelectTriggerProps,\n  SelectValueProps as _SelectValueProps\n} from '@radix-ui/react-select';\nimport type { ReactNode } from 'react';\n\nimport type { BaseNodeProps, ClassValue, PropsSlot, ThemeSize } from '@/types/other';\n\nimport type { SelectSlots } from './select-variants';\n\nexport type SelectClassNames = Partial<Record<SelectSlots, ClassValue>>;\n\nexport interface SelectContentProps extends BaseNodeProps<_SelectContentProps> {\n  classNames?: Pick<SelectClassNames, 'content' | 'scrollDownButton' | 'scrollUpButton' | 'viewport'>;\n  scrollDownButton?: React.ReactNode;\n  scrollUpButton?: React.ReactNode;\n}\n\nexport interface SelectItemProps extends BaseNodeProps<_SelectItemProps>, PropsSlot {\n  classNames?: Pick<SelectClassNames, 'item' | 'itemIndicator'>;\n  indicatorIcon?: React.ReactNode;\n}\n\nexport interface SelectLabelProps extends BaseNodeProps<_SelectLabelProps> {}\n\nexport interface SelectSeparatorProps extends BaseNodeProps<_SelectSeparatorProps> {}\n\nexport interface SelectTriggerProps\n  extends BaseNodeProps<_SelectTriggerProps>,\n    Pick<_SelectValueProps, 'placeholder'>,\n    PropsSlot {\n  classNames?: Pick<SelectClassNames, 'selectedValue' | 'trigger' | 'triggerIcon'>;\n  triggerIcon?: React.ReactNode;\n}\n\nexport type SelectOptionItemData = Omit<SelectItemProps, 'children'> & {\n  label?: ReactNode;\n  type?: 'item';\n};\n\nexport type SelectSeparatorOptionData = SelectSeparatorProps & {\n  type: 'separator';\n};\n\nexport type SelectGroupOptionData = Omit<SelectLabelProps, 'children'> & {\n  children: SelectOptionItemData[];\n  label?: ReactNode;\n  type?: 'group';\n};\n\nexport type SelectOptionData = SelectOptionItemData | SelectGroupOptionData | SelectSeparatorOptionData;\n\nexport interface SelectOptionProps extends Pick<SelectItemProps, 'indicatorIcon'> {\n  classNames?: SelectClassNames;\n  item: SelectOptionData;\n  size?: ThemeSize;\n}\n\nexport interface SelectProps\n  extends BaseNodeProps<Omit<_SelectProps, 'children'>>,\n    Pick<SelectItemProps, 'indicatorIcon'> {\n  classNames?: SelectClassNames;\n  contentProps?: Omit<SelectContentProps, 'children'>;\n  items: SelectOptionData[];\n  size?: ThemeSize;\n  triggerProps?: SelectTriggerProps;\n}\n",
      "type": "registry:ui",
      "target": "components/select/types.ts"
    }
  ]
}
