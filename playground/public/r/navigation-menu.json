{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "navigation-menu",
  "type": "registry:block",
  "title": "Navigation Menu",
  "registryDependencies": ["https://ui-play.skyroc.me/r/style.json"],
  "files": [
    {
      "path": "src/components/navigation-menu/NavigationMenu.tsx",
      "content": "import NavigationMenuChildLink from './NavigationMenuChildLink';\nimport NavigationMenuChildList from './NavigationMenuChildList';\nimport NavigationMenuChildListItem from './NavigationMenuChildListItem';\nimport NavigationMenuContent from './NavigationMenuContent';\nimport NavigationMenuIndicator from './NavigationMenuIndicator';\nimport NavigationMenuItem from './NavigationMenuItem';\nimport NavigationMenuLink from './NavigationMenuLink';\nimport NavigationMenuList from './NavigationMenuList';\nimport NavigationMenuRoot from './NavigationMenuRoot';\nimport NavigationMenuTrigger from './NavigationMenuTrigger';\nimport NavigationMenuViewport from './NavigationMenuViewport';\nimport type { NavigationMenuItemOption, NavigationMenuItemOptionProps, NavigationMenuProps } from './types';\n\nfunction isLink(item: NavigationMenuItemOption) {\n  return item.type === 'link';\n}\n\nconst NavigationMenu = (props: NavigationMenuProps) => {\n  const { classNames, items, showArrow, size, ...rest } = props;\n\n  return (\n    <NavigationMenuRoot {...rest}>\n      <NavigationMenuList\n        className={classNames?.list}\n        size={size}\n      >\n        {items.map((item, index) => (\n          <NavigationMenuItem\n            className={classNames?.item}\n            key={String(index)}\n            value={item.value}\n          >\n            {isLink(item) ? (\n              <NavigationMenuLink\n                classNames={classNames}\n                size={size}\n                {...item}\n              >\n                {item.label}\n              </NavigationMenuLink>\n            ) : (\n              <>\n                <NavigationMenuTrigger\n                  classNames={classNames}\n                  size={size}\n                  {...Object.fromEntries(Object.entries(rest).filter(([key]) => key !== 'children'))}\n                >\n                  {item.label}\n                </NavigationMenuTrigger>\n\n                <NavigationMenuContent className={classNames?.content}>\n                  <NavigationMenuChildList\n                    className={classNames?.childList}\n                    size={size}\n                  >\n                    {item.children &&\n                      item.children.map((child, index) => (\n                        <NavigationMenuChildListItem\n                          className={classNames?.childListItem}\n                          key={String(index)}\n                        >\n                          <NavigationMenuChildLink\n                            {...child}\n                            classNames={classNames}\n                            size={size}\n                          >\n                            {child.label}\n                          </NavigationMenuChildLink>\n                        </NavigationMenuChildListItem>\n                      ))}\n                  </NavigationMenuChildList>\n                </NavigationMenuContent>\n              </>\n            )}\n          </NavigationMenuItem>\n        ))}\n      </NavigationMenuList>\n\n      {/* <NavigationMenuViewport\n        classNames={classNames}\n        size={size}\n      /> */}\n    </NavigationMenuRoot>\n  );\n};\n\nexport default NavigationMenu;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenu.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuChildLink.tsx",
      "content": "import { NavigationMenuLink } from '@radix-ui/react-navigation-menu';\nimport { isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuChildLinkProps } from './types';\n\nconst NavigationMenuChildLink = (props: NavigationMenuChildLinkProps) => {\n  const { children, className, classNames, description, leading, size, trailing, ...rest } = props;\n\n  const { childLink, childLinkContent, childLinkDescription, childLinkIcon, childLinkLabel } = navigationMenuVariants({\n    size\n  });\n\n  console.log('childLink', children);\n\n\n  const mergedCls = {\n    cls: cn(childLink(), className || classNames?.childLink),\n    content: cn(childLinkContent(), classNames?.childLinkContent),\n    description: cn(childLinkDescription(), classNames?.childLinkDescription),\n    icon: cn(childLinkIcon(), classNames?.childLinkIcon),\n    label: cn(childLinkLabel(), classNames?.childLinkLabel)\n  };\n\n  return (\n    <NavigationMenuLink\n      {...rest}\n      data-slot=\"navigation-menu-child-link\"\n    >\n      {isValidElement(leading) ? withClassName(leading, mergedCls.icon) : leading}\n\n      <div className={mergedCls.content}>\n        <div className={mergedCls.label}>{children}</div>\n\n        {description && <p className={mergedCls.description}>{description}</p>}\n      </div>\n\n      {trailing}\n    </NavigationMenuLink>\n  );\n};\n\nexport default NavigationMenuChildLink;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuChildLink.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuChildList.tsx",
      "content": "import { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuChildListProps } from './types';\n\nconst NavigationMenuChildList = (props: NavigationMenuChildListProps) => {\n  const { className, ...rest } = props;\n\n  const { childList } = navigationMenuVariants();\n\n  const mergedCls = cn(childList(), className);\n\n  return (\n    <ul\n      {...rest}\n      className={mergedCls}\n      data-slot=\"navigation-menu-child-list\"\n    />\n  );\n};\n\nexport default NavigationMenuChildList;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuChildList.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuChildListItem.tsx",
      "content": "import { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuChildListItemProps } from './types';\n\nconst NavigationMenuChildListItem = (props: NavigationMenuChildListItemProps) => {\n  const { className, ...rest } = props;\n\n  const { childListItem } = navigationMenuVariants();\n\n  const mergedCls = cn(childListItem(), className);\n\n  return (\n    <li\n      {...rest}\n      className={mergedCls}\n      data-slot=\"navigation-menu-child-list-item\"\n    />\n  );\n};\n\nexport default NavigationMenuChildListItem;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuChildListItem.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuContent.tsx",
      "content": "import { Content } from '@radix-ui/react-navigation-menu';\n\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuContentProps } from './types';\n\nconst NavigationMenuContent = (props: NavigationMenuContentProps) => {\n  const { className, ...rest } = props;\n\n  const { content } = navigationMenuVariants();\n\n  const mergedCls = cn(content(), className);\n\n  return (\n    <Content\n      {...rest}\n      className={mergedCls}\n      data-slot=\"navigation-menu-content\"\n    />\n  );\n};\n\nexport default NavigationMenuContent;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuContent.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuIndicator.tsx",
      "content": "import { Indicator } from '@radix-ui/react-navigation-menu';\n\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuIndicatorProps } from './types';\n\nconst NavigationMenuIndicator = (props: NavigationMenuIndicatorProps) => {\n  const { className, classNames, size, ...rest } = props;\n\n  const { arrow, indicator } = navigationMenuVariants({ size });\n\n  const mergedCls = cn(indicator(), className);\n\n  const mergedArrowCls = cn(arrow(), classNames?.arrow);\n\n  return (\n    <Indicator\n      {...rest}\n      className={mergedCls}\n      data-size={size}\n      data-slot=\"navigation-menu-indicator\"\n    >\n      <div\n        className={mergedArrowCls}\n        data-slot=\"navigation-menu-indicator-arrow\"\n      />\n    </Indicator>\n  );\n};\n\nexport default NavigationMenuIndicator;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuIndicator.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuItem.tsx",
      "content": "import { Item } from '@radix-ui/react-navigation-menu';\n\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuItemProps } from './types';\n\nconst NavigationMenuItem = (props: NavigationMenuItemProps) => {\n  const { className, ...rest } = props;\n\n  const { item } = navigationMenuVariants();\n\n  const mergedCls = cn(item(), className);\n\n  return (\n    <Item\n      data-slot=\"navigation-menu-item\"\n      {...rest}\n      className={mergedCls}\n    />\n  );\n};\n\nexport default NavigationMenuItem;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuItem.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuLink.tsx",
      "content": "import { Link } from '@radix-ui/react-navigation-menu';\nimport { ArrowUpRight } from 'lucide-react';\nimport { isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuLinkProps } from './types';\n\nconst NavigationMenuLink = (props: NavigationMenuLinkProps) => {\n  const { children, className, classNames, leading, size, trailing, ...rest } = props;\n\n  const { itemIcon, link, linkIcon, linkLabel } = navigationMenuVariants({ size });\n\n  const mergedCls = {\n    cls: cn(link(), className || classNames?.link),\n    icon: cn(itemIcon(), classNames?.itemIcon),\n    label: cn(linkLabel(), classNames?.linkLabel),\n    linkIcon: cn(linkIcon(), classNames?.linkIcon)\n  };\n\n  return (\n    <Link\n      data-slot=\"navigation-menu-link\"\n      {...rest}\n      className={mergedCls.cls}\n    >\n      {isValidElement(leading) ? withClassName(leading, mergedCls.icon) : leading}\n\n      <div\n        className={mergedCls.label}\n        data-slot=\"navigation-menu-link-label\"\n      >\n        {children}\n      </div>\n\n      {trailing || <ArrowUpRight className={mergedCls.linkIcon} />}\n    </Link>\n  );\n};\n\nexport default NavigationMenuLink;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuLink.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuList.tsx",
      "content": "import { List } from '@radix-ui/react-navigation-menu';\n\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuListProps } from './types';\n\nconst NavigationMenuList = (props: NavigationMenuListProps) => {\n  const { className, size, ...rest } = props;\n\n  const { list } = navigationMenuVariants({ size });\n\n  const mergedCls = cn(list(), className);\n\n  return (\n    <List\n      {...rest}\n      className={mergedCls}\n      data-size={size}\n      data-slot=\"navigation-menu-list\"\n    />\n  );\n};\n\nexport default NavigationMenuList;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuList.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuRoot.tsx",
      "content": "import { Root } from '@radix-ui/react-navigation-menu';\n\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuRootProps } from './types';\n\nconst NavigationMenuRoot = (props: NavigationMenuRootProps) => {\n  const { className, ...rest } = props;\n\n  const { root } = navigationMenuVariants();\n\n  const mergedCls = cn(root(), className);\n\n  return (\n    <Root\n      {...rest}\n      className={mergedCls}\n      data-slot=\"navigation-menu\"\n      data-viewport={false}\n    />\n  );\n};\n\nexport default NavigationMenuRoot;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuRoot.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuTrigger.tsx",
      "content": "import { Trigger } from '@radix-ui/react-navigation-menu';\nimport { ChevronDown } from 'lucide-react';\nimport { isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuTriggerProps } from './types';\n\nconst NavigationMenuTrigger = (props: NavigationMenuTriggerProps) => {\n  const { children, className, classNames, leading, trailing, ...rest } = props;\n\n  const { itemIcon, trigger, triggerIcon } = navigationMenuVariants();\n\n  const mergedCls = {\n    cls: cn(trigger(), className || classNames?.trigger),\n    icon: cn(itemIcon(), classNames?.itemIcon),\n    triggerIcon: cn(triggerIcon(), classNames?.triggerIcon)\n  };\n\n  return (\n    <Trigger\n      {...rest}\n      className={mergedCls.cls}\n      data-slot=\"navigation-menu-trigger\"\n    >\n      {isValidElement(leading) ? withClassName(leading, mergedCls.icon) : leading}\n\n      <span data-slot=\"navigation-menu-trigger-label\">{children}</span>\n\n      {trailing || (\n        <ChevronDown\n          aria-hidden=\"true\"\n          className={mergedCls.triggerIcon}\n        />\n      )}\n    </Trigger>\n  );\n};\n\nexport default NavigationMenuTrigger;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuTrigger.tsx"
    },
    {
      "path": "src/components/navigation-menu/NavigationMenuViewport.tsx",
      "content": "import { Viewport } from '@radix-ui/react-navigation-menu';\n\nimport { cn } from '@/lib/utils';\n\nimport { navigationMenuVariants } from './navigation-menu';\nimport type { NavigationMenuViewportProps } from './types';\n\nconst NavigationMenuViewport = (props: NavigationMenuViewportProps) => {\n  const { className, classNames, size, ...rest } = props;\n\n  const { viewport, viewportRoot } = navigationMenuVariants({ size });\n\n  const mergedCls = {\n    cls: cn(viewport(), className || classNames?.viewport),\n    root: cn(viewportRoot(), classNames?.viewportRoot)\n  };\n\n  return (\n    <div\n      className={mergedCls.root}\n      data-slot=\"navigation-menu-viewport-root\"\n    >\n      <Viewport\n        {...rest}\n        className={mergedCls.cls}\n        data-slot=\"navigation-menu-viewport\"\n      />\n    </div>\n  );\n};\n\nexport default NavigationMenuViewport;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/NavigationMenuViewport.tsx"
    },
    {
      "path": "src/components/navigation-menu/index.ts",
      "content": "export { default as NavigationMenu } from './NavigationMenu';\n\nexport { default as NavigationMenuChildLink } from './NavigationMenuChildLink';\n\nexport { default as NavigationMenuChildList } from './NavigationMenuChildList';\nexport { default as NavigationMenuChildListItem } from './NavigationMenuChildListItem';\nexport { default as NavigationMenuContent } from './NavigationMenuContent';\nexport { default as NavigationMenuIndicator } from './NavigationMenuIndicator';\nexport { default as NavigationMenuItem } from './NavigationMenuItem';\nexport { default as NavigationMenuLink } from './NavigationMenuLink';\nexport { default as NavigationMenuList } from './NavigationMenuList';\nexport { default as NavigationMenuRoot } from './NavigationMenuRoot';\nexport { default as NavigationMenuTrigger } from './NavigationMenuTrigger';\n\nexport { default as NavigationMenuViewport } from './NavigationMenuViewport';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/index.ts"
    },
    {
      "path": "src/components/navigation-menu/navigation-menu.ts",
      "content": "import { tv } from 'tailwind-variants';\n\nexport const navigationMenuVariants = tv({\n  defaultVariants: {\n    size: 'md'\n  },\n  slots: {\n    arrow: 'relative top-[70%] rotate-45 border border-border bg-background rounded-[2px]',\n    childLink: [\n      `flex items-start select-none rounded-md leading-none no-underline outline-none transition-colors duration-200 cursor-pointer `,\n      `focus:bg-accent focus:text-accent-foreground hover:bg-accent hover:text-accent-foreground`\n    ],\n    childLinkContent: `flex flex-col items-start`,\n    childLinkDescription: `line-clamp-2 text-muted-foreground leading-snug`,\n    childLinkIcon: 'shrink-0 text-muted-foreground',\n    childLinkLabel: `font-medium leading-none`,\n    childList: `grid gap-2 md:w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]`,\n    childListItem: `list-none`,\n    content: [\n      `left-0 top-0 w-full md:absolute md:w-auto p-2 pr-2.5 `,\n      'data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 ',\n      'group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none'\n    ],\n    indicator: [\n      `absolute top-full z-2 flex mt-1px w-[--radix-navigation-menu-indicator-size] items-end justify-center overflow-hidden transition-transform duration-200 ease-out translate-x-[--radix-navigation-menu-indicator-position]`,\n      `data-[state=visible]:animate-in data-[state=visible]:fade-in-0`,\n      `data-[state=hidden]:animate-out data-[state=hidden]:fade-out-0`\n    ],\n    item: `list-none relative`,\n    itemIcon: 'shrink-0 text-muted-foreground',\n    link: [\n      `group relative w-full flex items-center rounded-md font-medium outline-none cursor-pointer decoration-[none]`,\n      `focus:bg-accent focus:text-accent-foreground`,\n      `hover:bg-accent hover:text-accent-foreground`,\n      `disabled:pointer-events-none disabled:opacity-50`\n    ],\n    linkIcon: 'shrink-0 self-start text-muted-foreground',\n    linkLabel: 'truncate',\n    list: `group flex flex-1 list-none items-center justify-center my-0`,\n    root: `group/navigation-menu flex-1  relative z-2 w-full flex justify-center`,\n    trigger: [\n      `group inline-flex w-max items-center justify-center rounded-md bg-background font-medium transition-colors duration-200 decoration-none`,\n      `hover:bg-accent hover:text-accent-foreground`,\n      `focus:bg-accent focus:text-accent-foreground focus:outline-none`,\n      `disabled:pointer-events-none disabled:opacity-50`,\n      `data-[active]:bg-accent/50`,\n      `data-[state=open]:bg-accent/50`\n    ],\n    triggerIcon: `relative top-px transition duration-200 group-data-[state=open]:rotate-180`,\n    viewport: [\n      'origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]'\n    ],\n    viewportRoot: `absolute top-full left-0  z-50 flex isolate justify-center`\n  },\n  variants: {\n    size: {\n      '2xl': {\n        arrow: 'size-4.5',\n        childLink: 'gap-3.5 px-3.5 py-2.5',\n        childLinkDescription: 'mt-2.5',\n        childList: 'gap-3.5 p-3.5',\n        indicator: 'h-4',\n        link: 'gap-3.5 px-3.5 py-2.5',\n        linkIcon: 'size-4.5 -ml-3.5',\n        list: 'gap-2.5 text-xl',\n        trigger: 'gap-3.5 px-3.5 py-2.5',\n        viewport: 'mt-4'\n      },\n      lg: {\n        arrow: 'size-3.5',\n        childLink: 'gap-2.5 px-2.5 py-1.5',\n        childLinkDescription: 'mt-1.75',\n        childList: 'gap-2.5 p-2.5',\n        indicator: 'h-3',\n        link: 'gap-2.5 px-2.5 py-1.5',\n        linkIcon: 'size-3.5 -ml-2.5',\n        list: 'gap-1.75 text-base',\n        trigger: 'gap-2.5 px-2.5 py-1.5',\n        viewport: 'mt-3'\n      },\n      md: {\n        arrow: 'size-3',\n        childLink: 'gap-2 px-2 py-1.5',\n        childLinkDescription: 'mt-1.5',\n        childList: 'gap-2 p-2',\n        indicator: 'h-2.5',\n        link: 'gap-2 px-2 py-1.5',\n        linkIcon: 'size-3 -ml-2',\n        list: 'gap-1.5 text-sm',\n        trigger: 'gap-2 px-2 py-1.5',\n        viewport: 'mt-2.5'\n      },\n      sm: {\n        arrow: 'size-2.5',\n        childLink: 'gap-1.5 px-1.5 py-1',\n        childLinkDescription: 'mt-1.25',\n        childList: 'gap-1.75 p-1.75',\n        indicator: 'h-2',\n        link: 'gap-1.5 px-1.5 py-1',\n        linkIcon: 'size-2.5 -ml-1.5',\n        list: 'gap-1.25 text-xs',\n        trigger: 'gap-1.5 px-1.5 py-1',\n        viewport: 'mt-2'\n      },\n      xl: {\n        arrow: 'size-4',\n        childLink: 'gap-3 px-3 py-2',\n        childLinkDescription: 'mt-2',\n        childList: 'gap-3 p-3',\n        indicator: 'h-3.5',\n        link: 'gap-3 px-3 py-2',\n        linkIcon: 'size-4 -ml-3',\n        list: 'gap-2 text-lg',\n        trigger: 'gap-3 px-3 py-2',\n        viewport: 'mt-3.5'\n      },\n      xs: {\n        arrow: 'size-2.25',\n        childLink: 'gap-1 px-1 py-1',\n        childLinkDescription: 'mt-1.25',\n        childList: 'gap-1.5 p-1.5',\n        indicator: 'h-1.75',\n        link: 'gap-1 px-1 py-1',\n        linkIcon: 'size-2 -ml-1',\n        list: 'gap-1 text-2xs',\n        trigger: 'gap-1 px-1 py-1',\n        viewport: 'mt-1.75'\n      }\n    }\n  }\n});\n\nexport type NavigationMenuSlots = keyof typeof navigationMenuVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/navigation-menu.ts"
    },
    {
      "path": "src/components/navigation-menu/types.ts",
      "content": "import type {\n  NavigationMenuContentProps as _NavigationMenuContentProps,\n  NavigationMenuIndicatorProps as _NavigationMenuIndicatorProps,\n  NavigationMenuItemProps as _NavigationMenuItemProps,\n  NavigationMenuLinkProps as _NavigationMenuLinkProps,\n  NavigationMenuListProps as _NavigationMenuListProps,\n  NavigationMenuProps as _NavigationMenuRootProps,\n  NavigationMenuTriggerProps as _NavigationMenuTriggerProps,\n  NavigationMenuViewportProps as _NavigationMenuViewportProps\n} from '@radix-ui/react-navigation-menu';\nimport type { ReactNode } from 'react';\n\nimport type { BaseComponentProps, BaseNodeProps, ClassValue, PropsSlot } from '@/types/other';\n\nimport type { NavigationMenuSlots } from './navigation-menu';\n\nexport interface NavigationMenuItemBaseOption\n  extends Omit<BaseNodeProps<_NavigationMenuItemProps>, 'children'>,\n    PropsSlot {\n  value?: string;\n  description?: ReactNode;\n  label: ReactNode;\n  type?: 'item';\n}\n\nexport interface NavigationMenuLinkBaseOption\n  extends Omit<BaseNodeProps<_NavigationMenuLinkProps>, 'children'>,\n  PropsSlot {\n  value?: string;\n  label: ReactNode;\n  type: 'link';\n}\n\ntype NavigationMenuChildLinkSlots = Extract<\n  NavigationMenuSlots,\n  'childLink' | 'childLinkContent' | 'childLinkDescription' | 'childLinkIcon' | 'childLinkLabel'\n>;\n\nexport type NavigationMenuClassNames = Partial<Record<NavigationMenuSlots, ClassValue>>;\n\nexport type NavigationMenuChildLinkClassNames = Partial<Record<NavigationMenuChildLinkSlots, ClassValue>>;\n\nexport interface NavigationMenuChildLinkProps\n  extends BaseNodeProps<_NavigationMenuLinkProps>,\n    Pick<NavigationMenuItemBaseOption, 'description' | 'leading' | 'trailing'> {\n  classNames?: NavigationMenuChildLinkClassNames;\n}\n\nexport interface NavigationMenuChildListProps extends BaseComponentProps<'ul'> {}\n\nexport interface NavigationMenuChildListItemProps extends BaseComponentProps<'li'> {}\n\nexport interface NavigationMenuContentProps extends BaseNodeProps<_NavigationMenuContentProps> {}\n\nexport interface NavigationMenuIndicatorProps extends Omit<BaseNodeProps<_NavigationMenuIndicatorProps>, 'children'> {\n  classNames?: Pick<NavigationMenuClassNames, 'arrow' | 'indicator'>;\n}\n\nexport interface NavigationMenuItemProps extends Omit<NavigationMenuItemBaseOption, 'label'> {\n  children?: ReactNode;\n}\n\nexport interface NavigationMenuLinkProps\n  extends BaseNodeProps<_NavigationMenuLinkProps>,\n    Pick<NavigationMenuItemBaseOption, 'leading' | 'trailing'> {\n  classNames?: Pick<NavigationMenuClassNames, 'itemIcon' | 'link' | 'linkIcon' | 'linkLabel'>;\n}\n\nexport interface NavigationMenuListProps extends BaseNodeProps<_NavigationMenuListProps> {}\n\nexport interface NavigationMenuRootProps extends BaseNodeProps<_NavigationMenuRootProps> {}\n\nexport interface NavigationMenuTriggerProps\n  extends BaseNodeProps<_NavigationMenuTriggerProps>,\n    Pick<NavigationMenuItemBaseOption, 'leading' | 'trailing'> {\n  classNames?: Pick<NavigationMenuClassNames, 'itemIcon' | 'trigger' | 'triggerIcon'>;\n}\n\nexport interface NavigationMenuViewportProps extends BaseNodeProps<_NavigationMenuViewportProps> {\n  classNames?: Pick<NavigationMenuClassNames, 'viewport' | 'viewportRoot'>;\n}\n\nexport type NavigationMenuItemOptionProps = NavigationMenuItemBaseOption & {\n  children?: NavigationMenuItemOption[];\n};\n\nexport type NavigationMenuItemOption = NavigationMenuItemOptionProps | NavigationMenuLinkBaseOption;\n\nexport interface NavigationMenuProps extends Omit<BaseNodeProps<_NavigationMenuRootProps>, 'children'> {\n  classNames?: NavigationMenuClassNames;\n  items: NavigationMenuItemOption[];\n  showArrow?: boolean;\n}\n",
      "type": "registry:ui",
      "target": "components/navigation-menu/types.ts"
    }
  ]
}
