{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "menu",
  "type": "registry:block",
  "title": "Menu",
  "files": [
    {
      "path": "src/components/menu/MenuArrow.tsx",
      "content": "import { Arrow as _Arrow } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuArrowProps } from './types';\n\nconst MenuArrow = forwardRef<ComponentRef<typeof _Arrow>, MenuArrowProps>((props, ref) => {\n  const { className, component: Arrow = _Arrow, ...rest } = props;\n\n  const { arrow } = menuVariants();\n\n  const mergedCls = cn(arrow(), className);\n\n  return (\n    <Arrow\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    />\n  );\n});\n\nMenuArrow.displayName = 'MenuArrow';\n\nexport default MenuArrow;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuArrow.tsx"
    },
    {
      "path": "src/components/menu/MenuCheckboxGroup.tsx",
      "content": "'use client';\n\nimport { Group as _Group } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib';\n\nimport _MenuCheckboxItem from './MenuCheckboxItem';\nimport MenuLabel from './MenuLabel';\nimport MenuSeparator from './MenuSeparator';\nimport { isLabel, isSeparator } from './shared';\nimport type { MenuCheckboxGroupProps } from './types';\n\nconst MenuCheckboxGroup = forwardRef<ComponentRef<typeof _Group>, MenuCheckboxGroupProps>((props, ref) => {\n  const {\n    checks,\n    className,\n    classNames,\n    component: MenuCheckboxItem = _MenuCheckboxItem,\n    groupComponent: Group = _Group,\n    items,\n    labelComponent: Label = MenuLabel,\n    onChecksChange,\n    separatorComponent: Separator = MenuSeparator,\n    size,\n    ...rest\n  } = props;\n\n  return (\n    <Group\n      className={cn(className || classNames?.group)}\n      ref={ref}\n      {...rest}\n    >\n      {items.map((item, index) => {\n        if (isLabel(item)) {\n          return (\n            <Label\n              classNames={classNames}\n              key={String(index)}\n              size={size}\n              {...item}\n            >\n              {item.label}\n            </Label>\n          );\n        }\n\n        if (isSeparator(item)) {\n          return (\n            <Separator\n              className={classNames?.separator}\n              key={String(index)}\n              size={size}\n            />\n          );\n        }\n\n        return (\n          <MenuCheckboxItem\n            key={String(index)}\n            {...item}\n            checked={item.checked || checks?.includes(item?.textValue || '')}\n            classNames={classNames}\n            size={size}\n            onCheckedChange={checked => {\n              item.onCheckedChange?.(checked);\n\n              if (checked) {\n                onChecksChange?.([...(checks || []), item?.textValue || '']);\n              } else {\n                onChecksChange?.([...(checks || []).filter(check => check !== item?.textValue)]);\n              }\n            }}\n          >\n            {item.label}\n          </MenuCheckboxItem>\n        );\n      })}\n    </Group>\n  );\n});\n\nMenuCheckboxGroup.displayName = 'MenuCheckboxGroup';\n\nexport default MenuCheckboxGroup;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuCheckboxGroup.tsx"
    },
    {
      "path": "src/components/menu/MenuCheckboxItem.tsx",
      "content": "import { CheckboxItem as _CheckboxItem } from '@radix-ui/react-menu';\nimport { Check } from 'lucide-react';\nimport type { ComponentRef } from 'react';\nimport { forwardRef, isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport MenuShortcut from '../menu/MenuShortcut';\n\nimport MenuItemIndicator from './MenuItemIndicator';\nimport { menuVariants } from './menu-variants';\nimport type { MenuCheckboxItemProps } from './types';\n\nconst MenuCheckboxItem = forwardRef<ComponentRef<typeof _CheckboxItem>, MenuCheckboxItemProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    component: CheckboxItem = _CheckboxItem,\n    indicatorComponent: IndicatorComponent = MenuItemIndicator,\n    indicatorIcon,\n    leading,\n    shortcut,\n    size,\n    trailing,\n    ...rest\n  } = props;\n\n  const { checkboxItem, itemIcon } = menuVariants({ size });\n\n  const mergedCls = cn(checkboxItem(), className || classNames?.item);\n\n  return (\n    <CheckboxItem\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    >\n      <IndicatorComponent\n        className={classNames?.itemIndicator}\n        size={size}\n      >\n        {indicatorIcon || <Check />}\n      </IndicatorComponent>\n\n      {isValidElement(leading) ? withClassName(leading, itemIcon()) : leading}\n\n      {children}\n\n      {trailing}\n\n      {shortcut && (\n        <MenuShortcut\n          className={classNames?.shortcut}\n          size={size}\n          value={shortcut}\n        />\n      )}\n    </CheckboxItem>\n  );\n});\n\nMenuCheckboxItem.displayName = 'MenuCheckboxItem';\n\nexport default MenuCheckboxItem;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuCheckboxItem.tsx"
    },
    {
      "path": "src/components/menu/MenuContent.tsx",
      "content": "import { Content as _Content, Portal as _Portal } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport MenuArrow from './MenuArrow';\nimport { menuVariants } from './menu-variants';\nimport type { MenuContentProps } from './types';\n\nconst MenuContent = forwardRef<ComponentRef<typeof _Content>, MenuContentProps>((props, ref) => {\n  const {\n    arrowClass,\n    arrowComponent: Arrow,\n    children,\n    className,\n    component: Content = _Content,\n    portalComponent: Portal = _Portal,\n    showArrow,\n    size,\n    ...rest\n  } = props;\n\n  const { content } = menuVariants({ size });\n\n  const mergedCls = cn(content(), className);\n\n  return (\n    <Portal>\n      <Content\n        className={mergedCls}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n\n        {showArrow && (\n          <MenuArrow\n            className={arrowClass}\n            component={Arrow}\n          />\n        )}\n      </Content>\n    </Portal>\n  );\n});\n\nMenuContent.displayName = 'MenuContent';\n\nexport default MenuContent;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuContent.tsx"
    },
    {
      "path": "src/components/menu/MenuItem.tsx",
      "content": "import { Item as _Item } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef, isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport MenuShortcut from './MenuShortcut';\nimport { menuVariants } from './menu-variants';\nimport type { MenuItemProps } from './types';\n\nconst MenuItem = forwardRef<ComponentRef<typeof _Item>, MenuItemProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    component: Item = _Item,\n    leading,\n    shortcut,\n    size,\n    trailing,\n    ...rest\n  } = props;\n\n  const { item, itemIcon } = menuVariants({ size });\n\n  const mergedCls = cn(item(), className || classNames?.item);\n\n  return (\n    <Item\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    >\n      {isValidElement(leading) ? withClassName(leading, itemIcon()) : leading}\n\n      <span>{children}</span>\n\n      {trailing}\n\n      {shortcut && (\n        <MenuShortcut\n          className={classNames?.shortcut}\n          size={size}\n          value={shortcut}\n        />\n      )}\n    </Item>\n  );\n});\n\nMenuItem.displayName = 'MenuItem';\n\nexport default MenuItem;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuItem.tsx"
    },
    {
      "path": "src/components/menu/MenuItemIndicator.tsx",
      "content": "import { ItemIndicator as _ItemIndicator } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuItemIndicatorProps } from './types';\n\nconst MenuItemIndicator = forwardRef<ComponentRef<typeof _ItemIndicator>, MenuItemIndicatorProps>((props, ref) => {\n  const { className, component: ItemIndicator = _ItemIndicator, size, ...rest } = props;\n\n  const { itemIndicator } = menuVariants({ size });\n\n  const mergedCls = cn(itemIndicator(), className);\n\n  return (\n    <ItemIndicator\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    />\n  );\n});\n\nMenuItemIndicator.displayName = 'MenuItemIndicator';\n\nexport default MenuItemIndicator;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuItemIndicator.tsx"
    },
    {
      "path": "src/components/menu/MenuLabel.tsx",
      "content": "import { Label as _Label } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef, isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuLabelProps } from './types';\n\nconst MenuLabel = forwardRef<ComponentRef<typeof _Label>, MenuLabelProps>((props, ref) => {\n  const { children, className, classNames, component: Label = _Label, leading, size, trailing, ...rest } = props;\n\n  const { itemIcon, label } = menuVariants({ size });\n\n  const mergedCls = cn(label(), className || classNames?.label);\n\n  return (\n    <Label\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    >\n      {isValidElement(leading) ? withClassName(leading, itemIcon()) : leading}\n\n      {children}\n\n      {trailing}\n    </Label>\n  );\n});\n\nMenuLabel.displayName = 'MenuLabel';\n\nexport default MenuLabel;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuLabel.tsx"
    },
    {
      "path": "src/components/menu/MenuOption.tsx",
      "content": "import { Sub } from '@radix-ui/react-dropdown-menu';\n\nimport MenuItem from '../menu/MenuItem';\n\nimport MenuLabel from './MenuLabel';\nimport MenuSeparator from './MenuSeparator';\nimport MenuSubContent from './MenuSubContent';\nimport MenuSubTrigger from './MenuSubTrigger';\nimport { isLabel, isSeparator, isSub } from './shared';\nimport type { MenuOptionProps } from './types';\n\nconst MenuOption = (props: MenuOptionProps) => {\n  const {\n    classNames,\n    component: Component = MenuItem,\n    item,\n    labelComponent: LabelComponent = MenuLabel,\n    separatorComponent: SeparatorComponent = MenuSeparator,\n    size,\n    subComponent: SubComponent = Sub,\n    subContentComponent: SubContentComponent = MenuSubContent,\n    subTriggerComponent: SubTriggerComponent = MenuSubTrigger\n  } = props;\n\n  if (isSeparator(item)) {\n    return (\n      <SeparatorComponent\n        {...item}\n        className={classNames?.separator}\n        size={size}\n      />\n    );\n  }\n\n  if (isLabel(item)) {\n    return (\n      <LabelComponent\n        classNames={classNames}\n        size={size}\n        {...item}\n      >\n        {item.label}\n      </LabelComponent>\n    );\n  }\n\n  if (isSub(item)) {\n    const { label, subContentProps, subProps, ...subTriggerProps } = item;\n    return (\n      <SubComponent {...subProps}>\n        <SubTriggerComponent {...subTriggerProps}>{label}</SubTriggerComponent>\n\n        <SubContentComponent\n          {...subContentProps}\n          className={classNames?.subContent}\n          size={size}\n        >\n          {item.children.map((child, index) => {\n            return (\n              <MenuOption\n                classNames={classNames}\n                component={Component}\n                item={child}\n                key={String(index)}\n                labelComponent={LabelComponent}\n                separatorComponent={SeparatorComponent}\n                size={size}\n                subComponent={SubComponent}\n                subContentComponent={SubContentComponent}\n                subTriggerComponent={SubTriggerComponent}\n              />\n            );\n          })}\n        </SubContentComponent>\n      </SubComponent>\n    );\n  }\n\n  return (\n    <Component\n      classNames={classNames}\n      size={size}\n      {...item}\n    >\n      {item.label}\n    </Component>\n  );\n};\n\nMenuOption.displayName = 'MenuOption';\n\nexport default MenuOption;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuOption.tsx"
    },
    {
      "path": "src/components/menu/MenuRadioGroup.tsx",
      "content": "'use client';\n\nimport { RadioGroup as _RadioGroup } from '@radix-ui/react-dropdown-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib';\n\nimport MenuLabel from './MenuLabel';\nimport MenuRadioItem from './MenuRadioItem';\nimport MenuSeparator from './MenuSeparator';\nimport { isLabel, isSeparator } from './shared';\nimport type { MenuRadioGroupProps } from './types';\n\nconst MenuRadioGroup = forwardRef<ComponentRef<typeof _RadioGroup>, MenuRadioGroupProps>((props, ref) => {\n  const {\n    className,\n    classNames,\n    component: RadioItem = MenuRadioItem,\n    groupComponent: RadioGroup = _RadioGroup,\n    items,\n    labelComponent: LabelComponent = MenuLabel,\n    separatorComponent: SeparatorComponent = MenuSeparator,\n    size,\n    ...rest\n  } = props;\n\n  return (\n    <RadioGroup\n      className={cn(className || classNames?.group)}\n      ref={ref}\n      {...rest}\n    >\n      {items.map((item, index) => {\n        if (isLabel(item)) {\n          return (\n            <LabelComponent\n              classNames={classNames}\n              key={String(index)}\n              size={size}\n              {...item}\n            >\n              {item.label}\n            </LabelComponent>\n          );\n        }\n\n        if (isSeparator(item)) {\n          return (\n            <SeparatorComponent\n              {...item}\n              className={classNames?.separator}\n              key={String(index)}\n              size={size}\n            />\n          );\n        }\n\n        return (\n          <RadioItem\n            key={String(index)}\n            {...item}\n            classNames={classNames}\n            size={size}\n          >\n            {item.label}\n          </RadioItem>\n        );\n      })}\n    </RadioGroup>\n  );\n});\n\nMenuRadioGroup.displayName = 'MenuRadioGroup';\n\nexport default MenuRadioGroup;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuRadioGroup.tsx"
    },
    {
      "path": "src/components/menu/MenuRadioItem.tsx",
      "content": "import { RadioItem as _RadioItem } from '@radix-ui/react-dropdown-menu';\nimport { CircleSmall } from 'lucide-react';\nimport type { ComponentRef } from 'react';\nimport { forwardRef, isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport MenuShortcut from '../menu/MenuShortcut';\n\nimport DropdownMenuItemIndicator from './MenuItemIndicator';\nimport { menuVariants } from './menu-variants';\nimport type { MenuRadioItemProps } from './types';\n\nconst MenuRadioItem = forwardRef<ComponentRef<typeof _RadioItem>, MenuRadioItemProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    component: RadioItem = _RadioItem,\n    indicatorComponent: IndicatorComponent = DropdownMenuItemIndicator,\n    indicatorIcon,\n    leading,\n    shortcut,\n    size,\n    trailing,\n    ...rest\n  } = props;\n\n  const { itemIcon, radioIndicatorIcon, radioItem } = menuVariants({ size });\n\n  const mergedCls = cn(radioItem(), className || classNames?.item);\n\n  const mergedIndicatorCls = cn(radioIndicatorIcon(), classNames?.radioIndicatorIcon);\n\n  return (\n    <RadioItem\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    >\n      <IndicatorComponent\n        className={classNames?.itemIndicator}\n        size={size}\n      >\n        {indicatorIcon || <CircleSmall className={mergedIndicatorCls} />}\n      </IndicatorComponent>\n\n      {isValidElement(leading) ? withClassName(leading, itemIcon()) : leading}\n\n      {children}\n\n      {trailing}\n\n      {shortcut && (\n        <MenuShortcut\n          className={classNames?.shortcut}\n          size={size}\n          value={shortcut}\n        />\n      )}\n    </RadioItem>\n  );\n});\n\nMenuRadioItem.displayName = 'MenuRadioItem';\n\nexport default MenuRadioItem;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuRadioItem.tsx"
    },
    {
      "path": "src/components/menu/MenuSeparator.tsx",
      "content": "import { Separator as _Separator } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuSeparatorProps } from './types';\n\nconst MenuSeparator = forwardRef<ComponentRef<typeof _Separator>, MenuSeparatorProps>((props, ref) => {\n  const { className, component: Separator = _Separator, size, ...rest } = props;\n\n  const { separator } = menuVariants({ size });\n\n  const mergedCls = cn(separator(), className);\n\n  return (\n    <Separator\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    />\n  );\n});\n\nMenuSeparator.displayName = 'MenuSeparator';\n\nexport default MenuSeparator;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuSeparator.tsx"
    },
    {
      "path": "src/components/menu/MenuShortcut.tsx",
      "content": "import { cn } from '@/lib';\n\nimport type { KeyboardKeyValue } from '../keyboard-key';\nimport { KeyboardKey } from '../keyboard-key';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuShortcutProps } from './types';\n\nconst MenuShortcut = (props: MenuShortcutProps) => {\n  const { className, size, value, ...rest } = props;\n\n  const { shortcut } = menuVariants({ size });\n\n  const mergedCls = cn(shortcut(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n    >\n      <KeyboardKey\n        size={size}\n        value={value as KeyboardKeyValue}\n      />\n    </div>\n  );\n};\n\nMenuShortcut.displayName = 'MenuShortcut';\n\nexport default MenuShortcut;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuShortcut.tsx"
    },
    {
      "path": "src/components/menu/MenuSubContent.tsx",
      "content": "import { Group as _Group, Portal as _Portal, SubContent as _SubContent } from '@radix-ui/react-menu';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuSubContentProps } from './types';\n\nconst MenuSubContent = forwardRef<ComponentRef<typeof _SubContent>, MenuSubContentProps>((props, ref) => {\n  const {\n    className,\n    component: SubContent = _SubContent,\n    groupComponent: Group = _Group,\n    portalComponent: Portal = _Portal,\n    size,\n    ...rest\n  } = props;\n\n  const { content } = menuVariants({ size });\n\n  const mergedCls = cn(content(), className);\n\n  return (\n    <Group>\n      <Portal>\n        <SubContent\n          className={mergedCls}\n          ref={ref}\n          {...rest}\n        />\n      </Portal>\n    </Group>\n  );\n});\n\nMenuSubContent.displayName = 'MenuSubContent';\n\nexport default MenuSubContent;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuSubContent.tsx"
    },
    {
      "path": "src/components/menu/MenuSubTrigger.tsx",
      "content": "import { SubTrigger as _SubTrigger } from '@radix-ui/react-menu';\nimport { ChevronRight } from 'lucide-react';\nimport type { ComponentRef } from 'react';\nimport { forwardRef, isValidElement } from 'react';\n\nimport { withClassName } from '@/lib/compose-props';\nimport { cn } from '@/lib/utils';\n\nimport { menuVariants } from './menu-variants';\nimport type { MenuSubTriggerProps } from './types';\n\nconst MenuSubTrigger = forwardRef<ComponentRef<typeof _SubTrigger>, MenuSubTriggerProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    component: SubTrigger = _SubTrigger,\n    leading,\n    size,\n    trailing,\n    triggerIcon,\n    ...rest\n  } = props;\n\n  const { itemIcon, subTrigger, subTriggerIcon } = menuVariants({ size });\n\n  const mergedCls = cn(subTrigger(), className);\n\n  const mergedTrailingIconCls = cn(subTriggerIcon(), classNames?.subTriggerIcon);\n\n  return (\n    <SubTrigger\n      className={mergedCls}\n      ref={ref}\n      {...rest}\n    >\n      {isValidElement(leading) ? withClassName(leading, itemIcon()) : leading}\n\n      {children}\n\n      {trailing}\n\n      {triggerIcon || <ChevronRight className={mergedTrailingIconCls} />}\n    </SubTrigger>\n  );\n});\n\nMenuSubTrigger.displayName = 'MenuSubTrigger';\n\nexport default MenuSubTrigger;\n",
      "type": "registry:ui",
      "target": "components/menu/MenuSubTrigger.tsx"
    },
    {
      "path": "src/components/menu/index.ts",
      "content": "export { default as MenuArrow } from './MenuArrow';\n\nexport { default as MenuCheckboxGroup } from './MenuCheckboxGroup';\nexport { default as MenuCheckboxItem } from './MenuCheckboxItem';\n\nexport { default as MenuContent } from './MenuContent';\n\nexport { default as MenuItem } from './MenuItem';\nexport { default as MenuItemIndicator } from './MenuItemIndicator';\n\nexport { default as MenuLabel } from './MenuLabel';\nexport { default as MenuOption } from './MenuOption';\n\nexport { default as MenuRadioGroup } from './MenuRadioGroup';\nexport { default as MenuRadioItem } from './MenuRadioItem';\n\nexport { default as MenuSeparator } from './MenuSeparator';\nexport { default as MenuShortcut } from './MenuShortcut';\n\nexport { default as MenuSubContent } from './MenuSubContent';\nexport { default as MenuSubTrigger } from './MenuSubTrigger';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/menu/index.ts"
    },
    {
      "path": "src/components/menu/menu-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\n\nexport const menuVariants = tv({\n  defaultVariants: {\n    size: 'md'\n  },\n  slots: {\n    arrow: 'fill-popover stroke-border',\n    checkboxItem: [\n      `relative flex items-center rounded-sm outline-none transition-colors duration-200 cursor-pointer select-none`,\n      `focus:bg-accent focus:text-accent-foreground`,\n      `data-[disabled]:pointer-events-none data-[disabled]:opacity-50`\n    ],\n    content: [\n      `z-50 min-w-48 rounded-md mt-1.5 border font-medium bg-popover translate-x-2 text-popover-foreground shadow-md will-change-transform`,\n      `data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95`,\n      `data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95`,\n      `data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2`\n    ],\n    group: '',\n    item: [\n      `relative flex font-medium items-center rounded-sm outline-none transition-colors duration-200 cursor-default select-none`,\n      `focus:bg-accent focus:text-accent-foreground`,\n      `data-[disabled]:pointer-events-none data-[disabled]:opacity-50`,\n      `data-[state=open]:bg-accent data-[state=open]:text-accent-foreground`\n    ],\n    itemIcon: `shrink-0 text-muted-foreground`,\n    itemIndicator: `absolute flex items-center justify-center text-primary`,\n    itemLink: [\n      `relative flex items-center rounded-sm outline-none transition-colors duration-200 cursor-pointer select-none no-underline`,\n      `focus:bg-accent focus:text-accent-foreground`,\n      `data-[disabled]:pointer-events-none data-[disabled]:opacity-50`\n    ],\n    itemLinkIcon: `shrink-0 self-start text-muted-foreground`,\n    label: 'flex items-center font-semibold',\n    radioIndicatorIcon: `shrink-0 fill-current`,\n    radioItem: [\n      `relative flex items-center rounded-sm outline-none transition-colors duration-200 cursor-pointer select-none`,\n      `focus:bg-accent focus:text-accent-foreground`,\n      `data-[disabled]:pointer-events-none data-[disabled]:opacity-50`\n    ],\n    separator: `h-px bg-border`,\n    shortcut: `ml-auto tracking-widest opacity-60`,\n    subContent: [\n      `z-50 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg will-change-transform`,\n      `data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95`,\n      `data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95`,\n      `data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2`\n    ],\n    subTrigger: `flex items-center rounded-sm outline-none cursor-default select-none focus:bg-accent data-[state=open]:bg-accent`,\n    subTriggerIcon: `ml-auto text-muted-foreground`\n  },\n  variants: {\n    size: {\n      '2xl': {\n        checkboxItem: 'gap-3.5 pl-12 pr-3.5 py-2.5',\n        content: 'text-xl p-1.75',\n        item: 'gap-3.5 px-3.5 py-2.5',\n        itemIndicator: 'left-3.5',\n        itemLink: 'gap-3.5 px-3.5 py-2.5',\n        itemLinkIcon: 'size-4.5 -ml-3.5',\n        label: 'gap-3.5 px-3.5 py-2.5',\n        radioItem: 'gap-3.5 pl-12 pr-3.5 py-2.5',\n        separator: '-mx-1.75 my-1.75',\n        subContent: 'text-xl p-1.75',\n        subTrigger: 'gap-3.5 px-3.5 py-2.5'\n      },\n      lg: {\n        checkboxItem: 'gap-2.5 pl-9 pr-2.5 py-1.5',\n        content: 'text-base p-1.25',\n        item: 'gap-2.5 px-2.5 py-1.5',\n        itemIndicator: 'left-2.5',\n        itemLink: 'gap-2.5 px-2.5 py-1.5',\n        itemLinkIcon: 'size-3.5 -ml-2.5',\n        label: 'gap-2.5 px-2.5 py-1.5',\n        radioItem: 'gap-2.5 pl-9 pr-2.5 py-1.5',\n        separator: '-mx-1.25 my-1.25',\n        subContent: 'text-base p-1.25',\n        subTrigger: 'gap-2.5 px-2.5 py-1.5'\n      },\n      md: {\n        checkboxItem: 'gap-2 pl-8 pr-2 py-1.5',\n        content: 'text-sm p-1',\n        item: 'gap-2 px-2 py-1.5',\n        itemIndicator: 'left-2',\n        itemLink: 'gap-2 px-2 py-1.5',\n        itemLinkIcon: 'size-3 -ml-2',\n        label: 'gap-2 px-2 py-1.5',\n        radioItem: 'gap-2 pl-8 pr-2 py-1.5',\n        separator: '-mx-1 my-1',\n        subContent: 'text-sm p-1',\n        subTrigger: 'gap-2 px-2 py-1.5'\n      },\n      sm: {\n        checkboxItem: 'gap-1.5 pl-7 pr-1.5 py-1',\n        content: 'text-xs p-0.875',\n        item: 'gap-1.5 px-1.5 py-1',\n        itemIndicator: 'left-1.5',\n        itemLink: 'gap-1.5 px-1.5 py-1',\n        itemLinkIcon: 'size-2.5 -ml-1.5',\n        label: 'gap-1.5 px-1.5 py-1',\n        radioItem: 'gap-1.5 pl-7 pr-1.5 py-1',\n        separator: '-mx-0.875 my-0.875',\n        subContent: 'text-xs p-0.875',\n        subTrigger: 'gap-1.5 px-1.5 py-1'\n      },\n      xl: {\n        checkboxItem: 'gap-3 pl-10 pr-3 py-2',\n        content: 'text-lg p-1.5',\n        item: 'gap-3 px-3 py-2',\n        itemIndicator: 'left-3',\n        itemLink: 'gap-3 px-3 py-2',\n        itemLinkIcon: 'size-4 -ml-3',\n        label: 'gap-3 px-3 py-2',\n        radioItem: 'gap-3 pl-10 pr-3 py-2',\n        separator: '-mx-1.5 my-1.5',\n        subContent: 'text-lg p-1.5',\n        subTrigger: 'gap-3 px-3 py-2'\n      },\n      xs: {\n        checkboxItem: 'gap-1 pl-6 pr-1 py-1',\n        content: 'text-2xs p-0.75',\n        item: 'gap-1 px-1 py-1',\n        itemIndicator: 'left-1',\n        itemLink: 'gap-1 px-1 py-1',\n        itemLinkIcon: 'size-2 -ml-1',\n        label: 'gap-1 px-1 py-1',\n        radioItem: 'gap-1 pl-6 pr-1 py-1',\n        separator: '-mx-0.75 my-0.75',\n        subContent: 'text-2xs p-0.75',\n        subTrigger: 'gap-1 px-1 py-1'\n      }\n    }\n  }\n});\n\nexport type MenuSlots = keyof typeof menuVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/menu/menu-variants.ts"
    },
    {
      "path": "src/components/menu/shared.ts",
      "content": "import type {\n  MenuLabelOption,\n  MenuOptionData,\n  MenuRadioItemOptionProps,\n  MenuSeparatorOption,\n  MenuSubOption\n} from './types';\n\nexport function isLabel(opt: MenuOptionData | MenuRadioItemOptionProps): opt is MenuLabelOption {\n  return opt.type === 'label';\n}\nexport function isSeparator(opt: MenuOptionData | MenuRadioItemOptionProps): opt is MenuSeparatorOption {\n  return opt.type === 'separator';\n}\n\nexport function isSub(opt: MenuOptionData | MenuRadioItemOptionProps): opt is MenuSubOption {\n  return opt.type === 'sub' || 'children' in opt;\n}\n",
      "type": "registry:ui",
      "target": "components/menu/shared.ts"
    },
    {
      "path": "src/components/menu/types.ts",
      "content": "import type {\n  MenuArrowProps as _MenuArrowProps,\n  MenuCheckboxItemProps as _MenuCheckboxItemProps,\n  MenuContentProps as _MenuContentProps,\n  MenuGroupProps as _MenuGroupProps,\n  MenuItemIndicatorProps as _MenuItemIndicatorProps,\n  MenuItemProps as _MenuItemProps,\n  MenuLabelProps as _MenuLabelProps,\n  MenuRadioGroupProps as _MenuRadioGroupProps,\n  MenuRadioItemProps as _MenuRadioItemProps,\n  MenuSeparatorProps as _MenuSeparatorProps,\n  MenuSubContentProps as _MenuSubContentProps,\n  MenuSubTriggerProps as _MenuSubTriggerProps\n} from '@radix-ui/react-menu';\nimport type { ComponentType, ElementType, ReactNode } from 'react';\n\nimport type { BaseComponentProps, BaseNodeProps, ClassValue, ThemeSize } from '@/types/other';\n\nimport type { MenuSlots } from './menu-variants';\n\nexport type MenuClassNames = Partial<Record<MenuSlots, ClassValue>>;\n\n// MenuArrow\nexport type MenuArrowProps = BaseNodeProps<_MenuArrowProps> & {\n  component?: ElementType<MenuArrowProps>;\n};\n\nexport type MenuCheckboxGroupItemProps =\n  | MenuLabelOption\n  | MenuSeparatorOption\n  | (Omit<MenuCheckboxItemProps, 'children'> & {\n      label?: ReactNode;\n    });\n\nexport interface MenuCheckboxGroupProps extends MenuCommonProps, BaseNodeProps<_MenuGroupProps> {\n  checks?: string[];\n  component?: ElementType<MenuCheckboxItemProps>;\n  groupComponent?: ElementType;\n  items: MenuCheckboxGroupItemProps[];\n  labelComponent?: ElementType<MenuLabelProps>;\n  onChecksChange?: (checks: string[]) => void;\n  separatorComponent?: ElementType<MenuSeparatorProps>;\n}\n\nexport interface MenuCheckboxItemProps extends BaseNodeProps<_MenuCheckboxItemProps> {\n  classNames?: Pick<MenuClassNames, 'item' | 'itemIndicator' | 'shortcut'>;\n  component?: ElementType<_MenuCheckboxItemProps>;\n  indicatorComponent?: ElementType<MenuItemIndicatorProps>;\n  indicatorIcon?: ReactNode;\n  leading?: ReactNode;\n  shortcut?: string | string[];\n  trailing?: ReactNode;\n}\n\nexport type MenuContentProps = BaseNodeProps<_MenuContentProps> & {\n  arrowClass?: ClassValue;\n  arrowComponent?: ElementType<MenuArrowProps>;\n  component?: ElementType<MenuContentProps>;\n  portalComponent?: ElementType<MenuContentProps>;\n  showArrow?: boolean;\n};\n\n// MenuItem\nexport interface MenuItemProps extends BaseNodeProps<_MenuItemProps> {\n  classNames?: Pick<MenuClassNames, 'item' | 'shortcut'>;\n  component?: ComponentType<_MenuItemProps>;\n  leading?: ReactNode;\n  shortcut?: string | string[];\n  trailing?: ReactNode;\n}\n\nexport interface MenuItemIndicatorProps extends BaseNodeProps<_MenuItemIndicatorProps> {\n  component?: ComponentType<_MenuItemIndicatorProps>;\n}\n\n// MenuLabel\nexport interface MenuLabelProps extends BaseNodeProps<_MenuLabelProps> {\n  classNames?: Pick<MenuClassNames, 'itemIcon' | 'label'>;\n  component?: ElementType<MenuLabelProps>;\n  leading?: ReactNode;\n  trailing?: ReactNode;\n}\n\nexport interface MenuOption extends Omit<MenuItemProps, 'children'> {\n  label?: ReactNode;\n  type?: 'item';\n}\n\nexport interface MenuLabelOption extends Omit<MenuLabelProps, 'children'> {\n  label?: ReactNode;\n  type: 'label';\n}\n\nexport interface MenuSeparatorOption extends Omit<MenuSeparatorProps, 'children'> {\n  type: 'separator';\n}\n\nexport interface MenuSubOption extends Omit<MenuSubTriggerProps, 'children'> {\n  children: MenuOptionData[];\n  label?: ReactNode;\n  subContentProps?: _MenuSubContentProps;\n  subProps?: _MenuSubTriggerProps;\n  type: 'sub';\n}\n\n// MenuOptionData\nexport type MenuOptionData = MenuOption | MenuLabelOption | MenuSeparatorOption | MenuSubOption;\n\nexport interface MenuCommonProps {\n  classNames?: MenuClassNames;\n  size?: ThemeSize;\n}\n\nexport interface MenuOptionProps extends MenuCommonProps {\n  component?: ElementType<MenuItemProps>;\n  item: MenuOptionData;\n  labelComponent?: ElementType<MenuLabelProps>;\n  separatorComponent?: ElementType<MenuSeparatorProps>;\n  subComponent?: ElementType<MenuSubTriggerProps>;\n  subContentComponent?: ElementType<MenuSubContentProps>;\n  subTriggerComponent?: ElementType<MenuSubTriggerProps>;\n}\n\n// MenuSeparator\nexport type MenuSeparatorProps = BaseNodeProps<_MenuSeparatorProps> & {\n  component?: ElementType<MenuSeparatorProps>;\n};\n\n// MenuShortcut\nexport type MenuShortcutProps = BaseComponentProps<'div'> & {\n  value?: string | string[];\n};\n\n// MenuSubContent\nexport type MenuSubContentProps = BaseNodeProps<_MenuSubContentProps> & {\n  component?: ElementType<MenuSubContentProps>;\n  groupComponent?: ElementType<MenuSubContentProps>;\n  portalComponent?: ElementType<MenuSubContentProps>;\n};\n\n// MenuSubTrigger\nexport interface MenuSubTriggerProps extends BaseNodeProps<_MenuSubTriggerProps> {\n  classNames?: Pick<MenuClassNames, 'subTriggerIcon'>;\n  component?: ElementType<MenuSubTriggerProps>;\n  leading?: ReactNode;\n  trailing?: ReactNode;\n  triggerIcon?: ReactNode;\n}\n\nexport interface MenuRadioItemProps extends BaseNodeProps<_MenuRadioItemProps> {\n  classNames?: Pick<MenuClassNames, 'item' | 'itemIndicator' | 'radioIndicatorIcon' | 'shortcut'>;\n  component?: ElementType<_MenuRadioItemProps>;\n  indicatorComponent?: ElementType<MenuItemIndicatorProps>;\n  indicatorIcon?: ReactNode;\n  leading?: ReactNode;\n  shortcut?: string | string[];\n  trailing?: ReactNode;\n  type?: 'item';\n}\n\nexport type MenuRadioItemOptionProps =\n  | MenuLabelOption\n  | MenuSeparatorOption\n  | (Omit<MenuRadioItemProps, 'children'> & {\n      label?: ReactNode;\n    });\n\nexport interface MenuRadioGroupProps extends MenuCommonProps, BaseNodeProps<_MenuRadioGroupProps> {\n  component?: ElementType<MenuRadioItemProps>;\n  groupComponent?: ElementType;\n  items: MenuRadioItemOptionProps[];\n  labelComponent?: ElementType<MenuLabelProps>;\n  separatorComponent?: ElementType<MenuSeparatorProps>;\n}\n",
      "type": "registry:ui",
      "target": "components/menu/types.ts"
    }
  ]
}
