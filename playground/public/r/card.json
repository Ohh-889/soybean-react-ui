{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card",
  "type": "registry:block",
  "title": "Card",
  "files": [
    {
      "path": "src/components/card/Card.tsx",
      "content": "import React, { isValidElement } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { If } from '../if';\n\nimport { CardContent } from './CardContent';\nimport { CardFooter } from './CardFooter';\nimport { CardHeader } from './CardHeader';\nimport { CardRoot } from './CardRoot';\nimport { CardTitle } from './CardTitle';\nimport { CardTitleRoot } from './CardTitleRoot';\nimport { cardVariants } from './card-variants';\nimport type { CardProps } from './types';\n\nexport const Card = React.forwardRef<HTMLDivElement, CardProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    extra,\n    flexHeight,\n    footer,\n    header,\n    size,\n    split,\n    title,\n    titleLeading,\n    titleRoot,\n    titleTrailing,\n    ...rest\n  } = props;\n\n  const showHeader = Boolean(header || title || extra);\n\n  const { root } = cardVariants({ size, split });\n\n  const mergedCls = cn(root(), className);\n\n  return (\n    <CardRoot\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    >\n      <If condition={showHeader}>\n        <CardHeader\n          className={classNames?.header}\n          size={size}\n        >\n          <If\n            condition={!header}\n            fallback={header}\n          >\n            <If\n              condition={!titleRoot}\n              fallback={titleRoot}\n            >\n              <CardTitleRoot\n                className={classNames?.titleRoot}\n                size={size}\n              >\n                {titleLeading}\n                <If\n                  condition={!isValidElement(title)}\n                  fallback={title}\n                >\n                  <CardTitle\n                    className={classNames?.title}\n                    size={size}\n                  >\n                    {title}\n                  </CardTitle>\n                </If>\n                {titleTrailing}\n              </CardTitleRoot>\n            </If>\n\n            {extra}\n          </If>\n        </CardHeader>\n      </If>\n\n      <CardContent\n        className={classNames?.content}\n        flexHeight={flexHeight}\n        size={size}\n      >\n        {children}\n      </CardContent>\n\n      <If\n        condition={!isValidElement(footer) && Boolean(footer)}\n        fallback={footer}\n      >\n        <CardFooter\n          className={classNames?.footer}\n          size={size}\n        >\n          {footer}\n        </CardFooter>\n      </If>\n    </CardRoot>\n  );\n});\n\nCard.displayName = 'Card';\n",
      "type": "registry:ui",
      "target": "components/card/Card.tsx"
    },
    {
      "path": "src/components/card/CardContent.tsx",
      "content": "import React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { cardVariants } from './card-variants';\nimport type { CardContentProps } from './types';\n\nexport const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>((props, ref) => {\n  const { className, flexHeight, size, ...rest } = props;\n\n  const { content } = cardVariants({ flexHeight, size });\n\n  const mergedCls = cn(content(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nCardContent.displayName = 'CardContent';\n",
      "type": "registry:ui",
      "target": "components/card/CardContent.tsx"
    },
    {
      "path": "src/components/card/CardFooter.tsx",
      "content": "import React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { cardVariants } from './card-variants';\nimport type { CardFooterProps } from './types';\n\nexport const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { footer } = cardVariants({ size });\n\n  const mergedCls = cn(footer(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nCardFooter.displayName = 'CardFooter';\n",
      "type": "registry:ui",
      "target": "components/card/CardFooter.tsx"
    },
    {
      "path": "src/components/card/CardHeader.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { cardVariants } from './card-variants';\nimport type { CardHeaderProps } from './types';\n\nexport const CardHeader = forwardRef<HTMLDivElement, CardHeaderProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { header } = cardVariants({ size });\n\n  const mergedCls = cn(header(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nCardHeader.displayName = 'CardHeader';\n",
      "type": "registry:ui",
      "target": "components/card/CardHeader.tsx"
    },
    {
      "path": "src/components/card/CardRoot.tsx",
      "content": "import React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { cardVariants } from './card-variants';\nimport type { CardRootProps } from './types';\n\nexport const CardRoot = React.forwardRef<HTMLDivElement, CardRootProps>((props, ref) => {\n  const { className, size, split, ...rest } = props;\n\n  const { root } = cardVariants({ size, split });\n\n  const mergedCls = cn(root(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nCardRoot.displayName = 'CardRoot';\n",
      "type": "registry:ui",
      "target": "components/card/CardRoot.tsx"
    },
    {
      "path": "src/components/card/CardTitle.tsx",
      "content": "import React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { cardVariants } from './card-variants';\nimport type { CardTitleProps } from './types';\n\nexport const CardTitle = React.forwardRef<HTMLDivElement, CardTitleProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { title } = cardVariants({ size });\n\n  const mergedCls = cn(title(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nCardTitle.displayName = 'CardTitle';\n",
      "type": "registry:ui",
      "target": "components/card/CardTitle.tsx"
    },
    {
      "path": "src/components/card/CardTitleRoot.tsx",
      "content": "import React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { cardVariants } from './card-variants';\nimport type { CardTitleRootProps } from './types';\n\nexport const CardTitleRoot = React.forwardRef<HTMLDivElement, CardTitleRootProps>((props, ref) => {\n  const { children, className, leading, size, trailing, ...rest } = props;\n\n  const { titleRoot } = cardVariants({ size });\n\n  const mergedCls = cn(titleRoot(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    >\n      {leading}\n      {children}\n      {trailing}\n    </div>\n  );\n});\n\nCardTitleRoot.displayName = 'CardTitleRoot';\n",
      "type": "registry:ui",
      "target": "components/card/CardTitleRoot.tsx"
    },
    {
      "path": "src/components/card/card-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\n\nexport const cardVariants = tv({\n  defaultVariants: {\n    flexHeight: false,\n    size: 'md'\n  },\n  slots: {\n    content: 'flex-grow overflow-auto',\n    footer: 'flex items-center justify-between',\n    header: 'flex items-center justify-between',\n    root: 'flex flex-col items-stretch rounded-md border bg-card text-card-foreground shadow-sm',\n    title: 'font-semibold tracking-tight',\n    titleRoot: 'flex items-center'\n  },\n  variants: {\n    flexHeight: {\n      true: {\n        content: 'overflow-hidden'\n      }\n    },\n    size: {\n      '2xl': {\n        content: 'px-7 py-6',\n        footer: 'px-7 py-6',\n        header: 'px-7 py-6',\n        root: 'text-lg',\n        title: 'text-xl',\n        titleRoot: 'gap-3.5'\n      },\n      lg: {\n        content: 'px-5 py-4',\n        footer: 'px-5 py-5',\n        header: 'px-5 py-4',\n        root: 'text-base',\n        title: 'text-lg',\n        titleRoot: 'gap-2.5'\n      },\n      md: {\n        content: 'px-4 py-3',\n        footer: 'px-4 py-3',\n        header: 'px-4 py-3',\n        root: 'text-sm',\n        title: 'text-base',\n        titleRoot: 'gap-2'\n      },\n      sm: {\n        content: 'px-3 py-2',\n        footer: 'px-3 py-2',\n        header: 'px-3 py-2',\n        root: 'text-xs',\n        title: 'text-sm',\n        titleRoot: 'gap-1.75'\n      },\n      xl: {\n        content: 'px-6 py-5',\n        footer: 'px-6 py-6',\n        header: 'px-6 py-5',\n        root: 'text-base',\n        title: 'text-lg',\n        titleRoot: 'gap-3'\n      },\n      xs: {\n        content: 'px-2 py-1.5',\n        footer: 'px-2 py-1.5',\n        header: 'px-2 py-1.5',\n        root: 'text-2xs',\n        title: 'text-xs',\n        titleRoot: 'gap-1.5'\n      }\n    },\n    split: {\n      true: {\n        root: 'divide-y divide-border'\n      }\n    }\n  }\n});\n\nexport type CardSlots = keyof typeof cardVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/card/card-variants.ts"
    },
    {
      "path": "src/components/card/index.ts",
      "content": "export * from './Card';\nexport * from './CardContent';\nexport * from './CardFooter';\nexport * from './CardHeader';\nexport * from './CardRoot';\nexport * from './CardTitle';\nexport * from './CardTitleRoot';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/card/index.ts"
    },
    {
      "path": "src/components/card/types.ts",
      "content": "import type { ReactNode } from 'react';\n\nimport type { ClassValue, ClassValueProp, ThemeSize } from '@/types/other';\n\nimport type { CardSlots } from './card-variants';\n\nexport interface CardRootProps\n  extends ClassValueProp,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'className' | 'title'> {\n  size?: ThemeSize;\n  split?: boolean;\n}\n\nexport interface CardHeaderProps\n  extends ClassValueProp,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'className' | 'title'> {\n  size?: ThemeSize;\n}\n\nexport interface CardTitleRootProps\n  extends ClassValueProp,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'className' | 'title'> {\n  leading?: React.ReactNode;\n  size?: ThemeSize;\n  trailing?: React.ReactNode;\n}\n\nexport interface CardTitleProps\n  extends ClassValueProp,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'className' | 'title'> {\n  size?: ThemeSize;\n}\n\nexport interface CardFooterProps\n  extends ClassValueProp,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'className' | 'title'> {\n  size?: ThemeSize;\n}\n\nexport interface CardContentProps\n  extends ClassValueProp,\n    Omit<React.HTMLAttributes<HTMLDivElement>, 'className' | 'title'> {\n  /**\n   * If true, the content will be flex-grow and overflow-hidden\n   *\n   * @default false\n   */\n  flexHeight?: boolean;\n  size?: ThemeSize;\n}\n\nexport type CardUi = Partial<Record<CardSlots, ClassValue>>;\n\nexport interface CardProps extends CardRootProps {\n  classNames?: CardUi;\n  extra?: ReactNode;\n  /**\n   * If true, the content will be flex-grow and overflow-hidden\n   *\n   * @default false\n   */\n  flexHeight?: boolean;\n  footer?: ReactNode;\n  header?: ReactNode;\n  title?: ReactNode;\n  titleLeading?: ReactNode;\n  titleRoot?: ReactNode;\n  titleTrailing?: ReactNode;\n}\n",
      "type": "registry:ui",
      "target": "components/card/types.ts"
    }
  ]
}
