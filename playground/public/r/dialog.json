{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:block",
  "title": "Dialog",
  "registryDependencies": ["https://ui-play.skyroc.me/r/style.json"],
  "files": [
    {
      "path": "src/components/dialog/Dialog.tsx",
      "content": "'use client';\n\nimport type { Content } from '@radix-ui/react-dialog';\nimport { Portal, Root, Trigger } from '@radix-ui/react-dialog';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport DialogClose from './DialogClose';\nimport DialogContent from './DialogContent';\nimport DialogDescription from './DialogDescription';\nimport DialogFooter from './DialogFooter';\nimport DialogHeader from './DialogHeader';\nimport DialogOverlay from './DialogOverlay';\nimport DialogTitle from './DialogTitle';\nimport type { DialogProps } from './types';\n\nconst Dialog = forwardRef<ComponentRef<typeof Content>, DialogProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    contentComponent: ContentComponent = DialogContent,\n    contentProps,\n    defaultOpen,\n    description,\n    footer,\n    modal,\n    onOpenChange,\n    open,\n    size,\n    title,\n    trigger\n  } = props;\n\n  return (\n    <Root\n      data-slot=\"dialog-root\"\n      defaultOpen={defaultOpen}\n      modal={modal}\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        asChild\n        data-slot=\"dialog-trigger\"\n      >\n        {trigger}\n      </Trigger>\n\n      <Portal data-slot=\"dialog-portal\">\n        <DialogOverlay className={classNames?.overlay} />\n\n        <ContentComponent\n          {...contentProps}\n          className={className || classNames?.content}\n          ref={ref}\n          size={size}\n        >\n          <DialogHeader\n            className={classNames?.header}\n            size={size}\n          >\n            <DialogTitle\n              className={classNames?.title}\n              size={size}\n            >\n              {title}\n            </DialogTitle>\n\n            {description && (\n              <DialogDescription\n                className={classNames?.description}\n                size={size}\n              >\n                {description}\n              </DialogDescription>\n            )}\n          </DialogHeader>\n\n          <DialogClose\n            className={classNames?.close}\n            size={size}\n            onClick={() => {\n              onOpenChange?.(false);\n            }}\n          />\n\n          {children}\n\n          {footer && (\n            <DialogFooter\n              className={classNames?.footer}\n              size={size}\n            >\n              {footer}\n            </DialogFooter>\n          )}\n        </ContentComponent>\n      </Portal>\n    </Root>\n  );\n});\n\nDialog.displayName = 'Dialog';\n\nexport default Dialog;\n",
      "type": "registry:ui",
      "target": "components/dialog/Dialog.tsx"
    },
    {
      "path": "src/components/dialog/DialogClose.tsx",
      "content": "import { Close as _Close } from '@radix-ui/react-dialog';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { ButtonIcon } from '../button';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogCloseProps } from './types';\n\nconst DialogClose = forwardRef<ComponentRef<typeof _Close>, DialogCloseProps>((props, ref) => {\n  const { children, className, component: Close = _Close, size, ...rest } = props;\n\n  const { close } = dialogVariants({ size });\n\n  const mergedClass = cn(close(), className);\n  return (\n    <Close\n      {...rest}\n      asChild\n      className={children ? (className as string) : mergedClass}\n      data-slot=\"dialog-close\"\n      ref={ref}\n    >\n      {children || (\n        <ButtonIcon\n          icon=\"lucide:x\"\n          size={size}\n        />\n      )}\n    </Close>\n  );\n});\n\nDialogClose.displayName = 'DialogClose';\n\nexport default DialogClose;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogClose.tsx"
    },
    {
      "path": "src/components/dialog/DialogContent.tsx",
      "content": "import { Content as _Content } from '@radix-ui/react-dialog';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogContentProps } from './types';\n\nconst DialogContent = forwardRef<ComponentRef<typeof _Content>, DialogContentProps>((props, ref) => {\n  const { className, component: Content = _Content, size, ...rest } = props;\n\n  const { content } = dialogVariants({ size });\n\n  const mergedClass = cn(content(), className);\n  return (\n    <Content\n      {...rest}\n      className={mergedClass}\n      data-slot=\"dialog-content\"\n      ref={ref}\n    />\n  );\n});\n\nDialogContent.displayName = 'DialogContent';\n\nexport default DialogContent;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogContent.tsx"
    },
    {
      "path": "src/components/dialog/DialogDescription.tsx",
      "content": "import { Description as _Description } from '@radix-ui/react-dialog';\nimport type { ComponentRef } from 'react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogDescriptionProps } from './types';\n\nconst DialogDescription = forwardRef<ComponentRef<typeof _Description>, DialogDescriptionProps>((props, ref) => {\n  const { className, component: Description = _Description, size, ...rest } = props;\n\n  const { description } = dialogVariants({ size });\n\n  const mergedClass = cn(description(), className);\n  return (\n    <Description\n      {...rest}\n      className={mergedClass}\n      data-slot=\"dialog-description\"\n      ref={ref}\n    />\n  );\n});\n\nDialogDescription.displayName = 'DialogDescription';\n\nexport default DialogDescription;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogDescription.tsx"
    },
    {
      "path": "src/components/dialog/DialogFooter.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogFooterProps } from './types';\n\nconst DialogFooter = forwardRef<HTMLDivElement, DialogFooterProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { footer } = dialogVariants({ size });\n\n  const mergedClass = cn(footer(), className);\n  return (\n    <footer\n      {...rest}\n      className={mergedClass}\n      data-slot=\"dialog-footer\"\n      ref={ref}\n    />\n  );\n});\n\nDialogFooter.displayName = 'DialogFooter';\n\nexport default DialogFooter;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogFooter.tsx"
    },
    {
      "path": "src/components/dialog/DialogHeader.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogHeaderProps } from './types';\n\nconst DialogHeader = forwardRef<HTMLDivElement, DialogHeaderProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { header } = dialogVariants({ size });\n\n  const mergedClass = cn(header(), className);\n  return (\n    <header\n      {...rest}\n      className={mergedClass}\n      data-slot=\"dialog-header\"\n      ref={ref}\n    />\n  );\n});\n\nDialogHeader.displayName = 'DialogHeader';\n\nexport default DialogHeader;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogHeader.tsx"
    },
    {
      "path": "src/components/dialog/DialogOverlay.tsx",
      "content": "import { Overlay as _Overlay } from '@radix-ui/react-dialog';\nimport { type ComponentRef, forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogOverlayProps } from './types';\n\nconst DialogOverlay = forwardRef<ComponentRef<typeof _Overlay>, DialogOverlayProps>((props, ref) => {\n  const { className, component: Overlay = _Overlay, size, ...rest } = props;\n\n  const { overlay } = dialogVariants({ size });\n\n  const mergedClass = cn(overlay(), className);\n  return (\n    <Overlay\n      {...rest}\n      className={mergedClass}\n      data-slot=\"dialog-overlay\"\n      ref={ref}\n    />\n  );\n});\n\nDialogOverlay.displayName = 'DialogOverlay';\n\nexport default DialogOverlay;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogOverlay.tsx"
    },
    {
      "path": "src/components/dialog/DialogTitle.tsx",
      "content": "import { Title as _Title } from '@radix-ui/react-dialog';\nimport { type ComponentRef, forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { dialogVariants } from './dialog-variants';\nimport type { DialogTitleProps } from './types';\n\nconst DialogTitle = forwardRef<ComponentRef<typeof _Title>, DialogTitleProps>((props, ref) => {\n  const { className, component: Title = _Title, size, ...rest } = props;\n\n  const { title } = dialogVariants({ size });\n\n  const mergedClass = cn(title(), className);\n  return (\n    <Title\n      {...rest}\n      className={mergedClass}\n      data-slot=\"dialog-title\"\n      ref={ref}\n    />\n  );\n});\n\nDialogTitle.displayName = 'DialogTitle';\n\nexport default DialogTitle;\n",
      "type": "registry:ui",
      "target": "components/dialog/DialogTitle.tsx"
    },
    {
      "path": "src/components/dialog/dialog-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\n\nexport const dialogVariants = tv({\n  defaultVariants: {\n    size: 'md'\n  },\n  slots: {\n    close: `absolute`,\n    content: [\n      `fixed left-[50%] top-[50%] z-50 flex flex-col w-full border bg-background shadow-lg translate-x-[-50%] translate-y-[-50%] md:w-full duration-200 sm:rounded-lg`,\n      `data-[state=open]:animate-in data-[state=open]:fade-in-0 data-[state=open]:zoom-in-95 data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]`,\n      `data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]`\n    ],\n    description: `text-muted-foreground`,\n    footer: `flex flex-col-reverse sm:flex-row sm:justify-end`,\n    header: `flex flex-col text-center sm:text-left`,\n    overlay: [\n      `fixed inset-0 z-50 bg-black/80`,\n      `data-[state=open]:animate-in data-[state=open]:fade-in-0`,\n      `data-[state=closed]:animate-out data-[state=closed]:fade-out-0`\n    ],\n    title: `flex items-center font-semibold leading-none tracking-tight`\n  },\n  variants: {\n    size: {\n      '2xl': {\n        close: 'right-6 top-6',\n        content: `gap-y-6 max-w-3xl px-7 py-6 text-xl`,\n        description: 'text-xl',\n        footer: 'gap-6',\n        header: 'gap-y-6',\n        title: 'gap-x-3.5 text-2xl'\n      },\n      lg: {\n        close: 'right-4 top-4',\n        content: `gap-y-4 max-w-xl px-5 py-4 text-base`,\n        description: 'text-base',\n        footer: 'gap-4',\n        header: 'gap-y-4',\n        title: 'gap-x-2.5 text-lg'\n      },\n      md: {\n        close: 'right-3 top-3',\n        content: `gap-y-3 max-w-lg px-4 py-3 text-sm`,\n        description: 'text-sm',\n        footer: 'gap-3',\n        header: 'gap-y-3',\n        title: 'gap-x-2 text-base'\n      },\n      sm: {\n        close: 'right-2 top-2',\n        content: `gap-y-2 max-w-md px-3 py-2 text-xs`,\n        description: 'text-xs',\n        footer: 'gap-2',\n        header: 'gap-y-2',\n        title: 'gap-x-1.75 text-sm'\n      },\n      xl: {\n        close: 'right-5 top-5',\n        content: `gap-y-5 max-w-2xl px-6 py-5 text-lg`,\n        description: 'text-lg',\n        footer: 'gap-5',\n        header: 'gap-y-5',\n        title: 'gap-x-3 text-xl'\n      },\n      xs: {\n        close: 'right-1.5 top-1.5',\n        content: `gap-y-1.5 max-w-md px-2 py-1.5 text-2xs`,\n        description: 'text-2xs',\n        footer: 'gap-1.5',\n        header: 'gap-y-1.5',\n        title: 'gap-x-1.5 text-xs'\n      }\n    }\n  }\n});\n\nexport type DialogSlots = keyof typeof dialogVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/dialog/dialog-variants.ts"
    },
    {
      "path": "src/components/dialog/index.ts",
      "content": "export { Portal as DialogPortal, Root as DialogRoot, Trigger as DialogTrigger } from '@radix-ui/react-dialog';\n\nexport { default as Dialog } from './Dialog';\nexport { default as DialogClose } from './DialogClose';\nexport { default as DialogContent } from './DialogContent';\nexport { default as DialogDescription } from './DialogDescription';\nexport { default as DialogFooter } from './DialogFooter';\nexport { default as DialogHeader } from './DialogHeader';\nexport { default as DialogOverlay } from './DialogOverlay';\n\nexport { default as DialogTitle } from './DialogTitle';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/dialog/index.ts"
    },
    {
      "path": "src/components/dialog/types.ts",
      "content": "import type {\n  DialogCloseProps as _DialogCloseProps,\n  DialogContentProps as _DialogContentProps,\n  DialogDescriptionProps as _DialogDescriptionProps,\n  DialogOverlayProps as _DialogOverlayProps,\n  // eslint-disable-next-line sort-imports\n  DialogPortalProps,\n  DialogProps as _DialogProps,\n  DialogTitleProps as _DialogTitleProps\n} from '@radix-ui/react-dialog';\nimport type { ComponentType } from 'react';\n\nimport type { BaseComponentProps, BaseNodeProps, ClassValue } from '@/types/other';\n\nimport type { DialogSlots } from './dialog-variants';\n\nexport type DialogClassNames = Partial<Record<DialogSlots, ClassValue>>;\n\nexport interface DialogCloseProps extends BaseNodeProps<_DialogCloseProps> {\n  component?: ComponentType<_DialogCloseProps>;\n}\n\nexport interface DialogContentProps extends BaseNodeProps<_DialogContentProps> {\n  component?: ComponentType<_DialogContentProps>;\n}\n\nexport interface DialogDescriptionProps extends BaseNodeProps<_DialogDescriptionProps> {\n  component?: ComponentType<_DialogDescriptionProps>;\n}\n\nexport interface DialogFooterProps extends BaseComponentProps<'footer'> {}\n\nexport interface DialogHeaderProps extends BaseComponentProps<'header'> {}\n\nexport interface DialogOverlayProps extends BaseNodeProps<_DialogOverlayProps> {\n  component?: ComponentType<_DialogOverlayProps>;\n}\n\nexport interface DialogTitleProps extends BaseNodeProps<_DialogTitleProps> {\n  component?: ComponentType<_DialogTitleProps>;\n}\n\nexport interface DialogProps<T extends DialogContentProps = DialogContentProps> extends BaseNodeProps<_DialogProps> {\n  classNames?: DialogClassNames;\n  contentComponent?: ComponentType<T>;\n  contentProps?: T;\n  description?: React.ReactNode;\n  footer?: React.ReactNode;\n  title?: React.ReactNode;\n  trigger?: React.ReactNode;\n}\n\nexport { DialogPortalProps };\n",
      "type": "registry:ui",
      "target": "components/dialog/types.ts"
    }
  ]
}
