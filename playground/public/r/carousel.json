{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:block",
  "title": "Carousel",
  "dependencies": ["embla-carousel-react"],
  "registryDependencies": ["https://ui-play.skyroc.me/r/style.json", "https://ui-play.skyroc.me/r/button.json"],
  "files": [
    {
      "path": "src/components/carousel/Carousel.tsx",
      "content": "import { Children, forwardRef } from 'react';\n\nimport { isFunction } from '@/lib/typed';\n\nimport CarouselContent from './CarouselContent';\nimport CarouselItem from './CarouselItem';\nimport CarouselNext from './CarouselNext';\nimport CarouselPrevious from './CarouselPrevious';\nimport CarouselRoot from './CarouselRoot';\nimport type { CarouselProps } from './types';\n\nconst Carousel = forwardRef<HTMLDivElement, CarouselProps>((props, ref) => {\n  const { children, className, classNames, counts, nextProps, previousProps, size, ...rest } = props;\n\n  return (\n    <CarouselRoot\n      className={className || classNames?.root}\n      ref={ref}\n      size={size}\n      {...rest}\n    >\n      <CarouselContent\n        classNames={classNames}\n        size={size}\n      >\n        {counts &&\n          Array.from({ length: counts }).map((_, index) => (\n            <CarouselItem\n              className={classNames?.item}\n              key={index}\n              size={size}\n            >\n              {isFunction(children) ? children(index) : Children.toArray(children)[index]}\n            </CarouselItem>\n          ))}\n      </CarouselContent>\n\n      <CarouselNext\n        className={classNames?.next}\n        size={size}\n        {...nextProps}\n      />\n\n      <CarouselPrevious\n        className={classNames?.previous}\n        size={size}\n        {...previousProps}\n      />\n    </CarouselRoot>\n  );\n});\n\nCarousel.displayName = 'Carousel';\n\nexport default Carousel;\n",
      "type": "registry:ui",
      "target": "components/carousel/Carousel.tsx"
    },
    {
      "path": "src/components/carousel/CarouselContent.tsx",
      "content": "'use client';\n\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { carouselVariants } from './carousel-variants';\nimport { useCarousel } from './context';\nimport type { CarouselContentProps } from './types';\n\nconst CarouselContent = forwardRef<HTMLDivElement, CarouselContentProps>((props, ref) => {\n  const { className, classNames, size, ...rest } = props;\n\n  const { carouselRef, orientation } = useCarousel();\n\n  const { content, contentWrapper } = carouselVariants({ orientation, size });\n\n  const contentClassName = cn(content(), classNames?.content);\n\n  const contentWrapperClassName = cn(contentWrapper(), className || classNames?.contentWrapper);\n\n  return (\n    <div\n      className={contentWrapperClassName}\n      ref={carouselRef}\n    >\n      <div\n        className={contentClassName}\n        ref={ref}\n        {...rest}\n      />\n    </div>\n  );\n});\nCarouselContent.displayName = 'CarouselContent';\n\nexport default CarouselContent;\n",
      "type": "registry:ui",
      "target": "components/carousel/CarouselContent.tsx"
    },
    {
      "path": "src/components/carousel/CarouselItem.tsx",
      "content": "'use client';\n\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { carouselVariants } from './carousel-variants';\nimport { useCarousel } from './context';\nimport type { CarouselItemProps } from './types';\n\nconst CarouselItem = forwardRef<HTMLDivElement, CarouselItemProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { orientation } = useCarousel();\n\n  const { item } = carouselVariants({ orientation, size });\n\n  const itemClassName = cn(item(), className);\n\n  return (\n    <div\n      aria-roledescription=\"slide\"\n      className={itemClassName}\n      ref={ref}\n      role=\"group\"\n      {...rest}\n    />\n  );\n});\n\nCarouselItem.displayName = 'CarouselItem';\n\nexport default CarouselItem;\n",
      "type": "registry:ui",
      "target": "components/carousel/CarouselItem.tsx"
    },
    {
      "path": "src/components/carousel/CarouselNext.tsx",
      "content": "'use client';\n\nimport { ChevronRight } from 'lucide-react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { ButtonIcon } from '../button';\n\nimport { carouselVariants } from './carousel-variants';\nimport { useCarousel } from './context';\nimport type { CarouselNextProps } from './types';\n\nconst CarouselNext = forwardRef<HTMLButtonElement, CarouselNextProps>((props, ref) => {\n  const { children, className, disabled, shape = 'circle', size, variant = 'pure', ...rest } = props;\n\n  const { canScrollNext, orientation, scrollNext } = useCarousel();\n\n  const { next } = carouselVariants({ orientation, size });\n\n  const nextClassName = cn(next(), className);\n\n  return (\n    <ButtonIcon\n      className={nextClassName}\n      disabled={!canScrollNext || disabled}\n      ref={ref}\n      shape={shape}\n      size={size}\n      variant={variant}\n      onClick={scrollNext}\n      {...rest}\n    >\n      {children || <ChevronRight />}\n    </ButtonIcon>\n  );\n});\n\nCarouselNext.displayName = 'CarouselNext';\n\nexport default CarouselNext;\n",
      "type": "registry:ui",
      "target": "components/carousel/CarouselNext.tsx"
    },
    {
      "path": "src/components/carousel/CarouselPrevious.tsx",
      "content": "'use client';\n\nimport { ChevronLeft } from 'lucide-react';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { ButtonIcon } from '../button';\n\nimport { carouselVariants } from './carousel-variants';\nimport { useCarousel } from './context';\nimport type { CarouselNextProps } from './types';\n\nconst CarouselNext = forwardRef<HTMLButtonElement, CarouselNextProps>((props, ref) => {\n  const { children, className, disabled, shape = 'circle', size, variant = 'pure', ...rest } = props;\n\n  const { canScrollPrev, orientation, scrollPrev } = useCarousel();\n\n  const { previous } = carouselVariants({ orientation, size });\n\n  const previousClassName = cn(previous(), className);\n\n  return (\n    <ButtonIcon\n      className={previousClassName}\n      disabled={!canScrollPrev || disabled}\n      ref={ref}\n      shape={shape}\n      size={size}\n      variant={variant}\n      onClick={scrollPrev}\n      {...rest}\n    >\n      {children || <ChevronLeft />}\n    </ButtonIcon>\n  );\n});\n\nCarouselNext.displayName = 'CarouselNext';\n\nexport default CarouselNext;\n",
      "type": "registry:ui",
      "target": "components/carousel/CarouselPrevious.tsx"
    },
    {
      "path": "src/components/carousel/CarouselRoot.tsx",
      "content": "'use client';\n\nimport useEmblaCarousel from 'embla-carousel-react';\nimport { forwardRef, useCallback, useEffect, useState } from 'react';\nimport type { KeyboardEvent } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { carouselVariants } from './carousel-variants';\nimport { CarouselContext } from './context';\nimport type { CarouselApi, CarouselRootProps } from './types';\n\nconst Carousel = forwardRef<HTMLDivElement, CarouselRootProps>((props, ref) => {\n  const { children, className, opts, orientation = 'horizontal', plugins, setApi, size, ...rest } = props;\n\n  const [canScrollPrev, setCanScrollPrev] = useState(false);\n  const [canScrollNext, setCanScrollNext] = useState(false);\n\n  const { root } = carouselVariants({ orientation, size });\n\n  const rootClassName = cn(root(), className);\n\n  const [carouselRef, api] = useEmblaCarousel(\n    {\n      ...opts,\n      axis: orientation === 'horizontal' ? 'x' : 'y'\n    },\n    plugins\n  );\n\n  const onSelect = useCallback((carouselApi: CarouselApi) => {\n    if (!carouselApi) {\n      return;\n    }\n\n    setCanScrollPrev(carouselApi.canScrollPrev());\n    setCanScrollNext(carouselApi.canScrollNext());\n  }, []);\n\n  const scrollPrev = useCallback(() => {\n    api?.scrollPrev();\n  }, [api]);\n\n  const scrollNext = useCallback(() => {\n    api?.scrollNext();\n  }, [api]);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      const prevKey = orientation === 'vertical' ? 'ArrowUp' : 'ArrowLeft';\n      const nextKey = orientation === 'vertical' ? 'ArrowDown' : 'ArrowRight';\n\n      if (event.key === prevKey) {\n        event.preventDefault();\n        scrollPrev();\n      } else if (event.key === nextKey) {\n        event.preventDefault();\n        scrollNext();\n      }\n    },\n    [orientation, scrollNext, scrollPrev]\n  );\n\n  useEffect(() => {\n    if (!api || !setApi) {\n      return;\n    }\n\n    setApi(api);\n  }, [api, setApi]);\n\n  useEffect(() => {\n    if (!api) {\n      return;\n    }\n\n    onSelect(api);\n\n    api.on('reInit', onSelect);\n    api.on('select', onSelect);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      api?.off('select', onSelect);\n    };\n  }, [api, onSelect]);\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        api,\n        canScrollNext,\n        canScrollPrev,\n        carouselRef,\n        opts,\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\n        scrollNext,\n        scrollPrev\n      }}\n    >\n      <div\n        aria-roledescription=\"carousel\"\n        className={rootClassName}\n        ref={ref}\n        role=\"region\"\n        tabIndex={0}\n        onKeyDownCapture={handleKeyDown}\n        {...rest}\n      >\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n});\n\nCarousel.displayName = 'Carousel';\n\nexport default Carousel;\n",
      "type": "registry:ui",
      "target": "components/carousel/CarouselRoot.tsx"
    },
    {
      "path": "src/components/carousel/carousel-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\n\nexport const carouselVariants = tv({\n  compoundVariants: [\n    {\n      class: {\n        content: '-ml-3',\n        item: 'pl-3',\n        next: '-right-10',\n        previous: '-left-10'\n      },\n      orientation: 'horizontal',\n      size: 'xs'\n    },\n    {\n      class: {\n        content: '-ml-3.5',\n        item: 'pl-3.5',\n        next: '-right-11',\n        previous: '-left-11'\n      },\n      orientation: 'horizontal',\n      size: 'sm'\n    },\n    {\n      class: {\n        content: '-ml-4.5',\n        item: 'pl-4.5',\n        next: '-right-13',\n        previous: '-left-13'\n      },\n      orientation: 'horizontal',\n      size: 'lg'\n    },\n    {\n      class: {\n        content: '-ml-5',\n        item: 'pl-5',\n        next: '-right-14',\n        previous: '-left-14'\n      },\n      orientation: 'horizontal',\n      size: 'xl'\n    },\n    {\n      class: {\n        content: '-ml-6',\n        item: 'pl-6',\n        next: '-right-16',\n        previous: '-left-16'\n      },\n      orientation: 'horizontal',\n      size: '2xl'\n    },\n    {\n      class: {\n        content: '-mt-3',\n        item: 'pt-3',\n        next: '-bottom-10',\n        previous: '-top-10'\n      },\n      orientation: 'vertical',\n      size: 'xs'\n    },\n    {\n      class: {\n        content: '-mt-3.5',\n        item: 'pt-3.5',\n        next: '-bottom-11',\n        previous: '-top-11'\n      },\n      orientation: 'vertical',\n      size: 'sm'\n    },\n    {\n      class: {\n        content: '-mt-4.5',\n        item: 'pt-4.5',\n        next: '-bottom-13',\n        previous: '-top-13'\n      },\n      orientation: 'vertical',\n      size: 'lg'\n    },\n    {\n      class: {\n        content: '-mt-5',\n        item: 'pt-5',\n        next: '-bottom-14',\n        previous: '-top-14'\n      },\n      orientation: 'vertical',\n      size: 'xl'\n    },\n    {\n      class: {\n        content: '-mt-6',\n        item: 'pt-6',\n        next: '-bottom-16',\n        previous: '-top-16'\n      },\n      orientation: 'vertical',\n      size: '2xl'\n    }\n  ],\n  defaultVariants: {\n    orientation: 'horizontal'\n  },\n  slots: {\n    content: 'flex',\n    contentWrapper: 'overflow-hidden',\n    item: 'min-w-0 shrink-0 grow-0 basis-full',\n    next: 'touch-manipulation absolute',\n    previous: 'touch-manipulation absolute',\n    root: 'relative'\n  },\n  variants: {\n    orientation: {\n      horizontal: {\n        content: '-ml-4',\n        item: 'pl-4',\n        next: '-right-12 top-1/2 -translate-y-1/2',\n        previous: '-left-12 top-1/2 -translate-y-1/2'\n      },\n      vertical: {\n        content: 'flex-col -mt-4',\n        item: 'pt-4',\n        next: '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\n        previous: '-top-12 left-1/2 -translate-x-1/2 rotate-90'\n      }\n    },\n    size: {\n      '2xl': {\n        root: 'text-xl'\n      },\n      lg: {\n        root: 'text-base'\n      },\n      md: {\n        root: 'text-sm'\n      },\n      sm: {\n        root: 'text-xs'\n      },\n      xl: {\n        root: 'text-lg'\n      },\n      xs: {\n        root: 'text-2xs'\n      }\n    }\n  }\n});\n\nexport type CarouselSlots = keyof typeof carouselVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/carousel/carousel-variants.ts"
    },
    {
      "path": "src/components/carousel/context.ts",
      "content": "'use client';\nimport { createContext, useContext } from 'react';\n\nimport type { CarouselContextProps } from './types';\n\nexport const CarouselContext = createContext<CarouselContextProps | null>(null);\n\nexport function useCarousel() {\n  const context = useContext(CarouselContext);\n\n  if (!context) {\n    throw new Error('useCarousel must be used within a <CarouselRoot />');\n  }\n\n  return context;\n}\n",
      "type": "registry:ui",
      "target": "components/carousel/context.ts"
    },
    {
      "path": "src/components/carousel/index.ts",
      "content": "export { default as Carousel } from './Carousel';\nexport { default as CarouselContent } from './CarouselContent';\nexport { default as CarouselItem } from './CarouselItem';\nexport { default as CarouselNext } from './CarouselNext';\nexport { default as CarouselPrevious } from './CarouselPrevious';\nexport { default as CarouselRoot } from './CarouselRoot';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/carousel/index.ts"
    },
    {
      "path": "src/components/carousel/types.ts",
      "content": "import type useEmblaCarousel from 'embla-carousel-react';\nimport { type UseEmblaCarouselType } from 'embla-carousel-react';\n\nimport type { BaseComponentProps, ClassValue } from '@/types/other';\n\nimport type { ButtonProps } from '../button';\n\nimport type { CarouselSlots } from './carousel-variants';\n\nexport type CarouselApi = UseEmblaCarouselType[1];\nexport type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\nexport type CarouselOptions = UseCarouselParameters[0];\nexport type CarouselPlugin = UseCarouselParameters[1];\n\nexport type CarouselRootType = {\n  opts?: CarouselOptions;\n  orientation?: 'horizontal' | 'vertical';\n  plugins?: CarouselPlugin;\n  setApi?: (api: CarouselApi) => void;\n};\n\nexport type CarouselContextProps = {\n  api: ReturnType<typeof useEmblaCarousel>[1];\n  canScrollNext: boolean;\n  canScrollPrev: boolean;\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\n  scrollNext: () => void;\n  scrollPrev: () => void;\n} & CarouselRootType;\n\nexport type CarouselUi = Partial<Record<CarouselSlots, ClassValue>>;\n\nexport type CarouselContentProps = BaseComponentProps<'div'> & {\n  classNames?: Pick<CarouselUi, 'content' | 'contentWrapper'>;\n};\n\nexport type CarouselItemProps = BaseComponentProps<'div'>;\n\nexport type CarouselNextProps = ButtonProps;\n\nexport type CarouselPreviousProps = ButtonProps;\n\nexport type CarouselRootProps = BaseComponentProps<'div'> & CarouselRootType;\n\nexport type CarouselPropsWithoutChildren = Omit<CarouselRootProps, 'children'> & {\n  classNames?: CarouselUi;\n  counts?: number;\n  nextProps?: Omit<ButtonProps, 'class'>;\n  previousProps?: Omit<ButtonProps, 'class'>;\n};\n\nexport interface CarouselWithSlotChildren extends CarouselPropsWithoutChildren {\n  children: (index: number) => React.ReactNode;\n}\n\nexport interface CarouselWithChildrenArray extends CarouselPropsWithoutChildren {\n  children: React.ReactNode[];\n}\n\nexport type CarouselProps = CarouselWithSlotChildren | CarouselWithChildrenArray;\n",
      "type": "registry:ui",
      "target": "components/carousel/types.ts"
    }
  ]
}
