{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "utils",
  "type": "registry:lib",
  "title": "Utils",
  "dependencies": ["clsx", "tailwind-merge"],
  "files": [
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx } from 'clsx';\nimport type { ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "src/lib/typed.ts",
      "content": "export const isSymbol = (value: any): value is symbol => {\n  return Boolean(value) && value.constructor === Symbol;\n};\n\nexport const isArray = Array.isArray;\n\nexport const isObject = (value: any): value is object => {\n  return Boolean(value) && value.constructor === Object;\n};\n\n/**\n * Checks if the given value is primitive.\n *\n * Primitive Types: number , string , boolean , symbol, bigint, undefined, null\n *\n * @param {*} value value to check\n * @returns {boolean} result\n */\nexport const isPrimitive = (value: any): boolean => {\n  return value === undefined || value === null || (typeof value !== 'object' && typeof value !== 'function');\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport const isFunction = (value: any): value is Function => {\n  return Boolean(value && value.constructor && value.call && value.apply);\n};\n\nexport const isString = (value: any): value is string => {\n  return typeof value === 'string' || value instanceof String;\n};\n\nexport const isNumber = (value: any): value is number => {\n  try {\n    return Number(value) === value;\n  } catch {\n    return false;\n  }\n};\n\nexport const isInt = (value: any): value is number => {\n  return isNumber(value) && value % 1 === 0;\n};\n\nexport const isFloat = (value: any): value is number => {\n  return isNumber(value) && value % 1 !== 0;\n};\n\nexport const isDate = (value: any): value is Date => {\n  return Object.prototype.toString.call(value) === '[object Date]';\n};\n\n/**\n * This is really a _best guess_ promise checking. You\n * should probably use Promise.resolve(value) to be 100%\n * sure you're handling it correctly.\n */\nexport const isPromise = (value: any): value is Promise<any> => {\n  if (!value) return false;\n  if (!value.then) return false;\n  if (!isFunction(value.then)) return false;\n  return true;\n};\n\nexport const isEmpty = (value: any) => {\n  if (value === true || value === false) return true;\n  if (value === null || value === undefined) return true;\n  if (isNumber(value)) return value === 0;\n  if (isDate(value)) return Number.isNaN(value.getTime());\n  if (isFunction(value)) return false;\n  if (isSymbol(value)) return false;\n  const length = (value as any).length;\n  if (isNumber(length)) return length === 0;\n  const size = (value as any).size;\n  if (isNumber(size)) return size === 0;\n  const keys = Object.keys(value).length;\n  return keys === 0;\n};\n\nexport const isEqual = <TType>(x: TType, y: TType): boolean => {\n  if (Object.is(x, y)) return true;\n  if (x instanceof Date && y instanceof Date) {\n    return x.getTime() === y.getTime();\n  }\n  if (x instanceof RegExp && y instanceof RegExp) {\n    return x.toString() === y.toString();\n  }\n  if (typeof x !== 'object' || x === null || typeof y !== 'object' || y === null) {\n    return false;\n  }\n  const keysX = Reflect.ownKeys(x as unknown as object) as (keyof typeof x)[];\n  const keysY = Reflect.ownKeys(y as unknown as object);\n  if (keysX.length !== keysY.length) return false;\n  for (let i = 0; i < keysX.length; i += 1) {\n    if (!Reflect.has(y as unknown as object, keysX[i])) return false;\n    if (!isEqual(x[keysX[i]], y[keysX[i]])) return false;\n  }\n  return true;\n};\n\nexport const isBlankString = (value: unknown | undefined) => {\n  return typeof value === 'string' && value === '';\n};\n",
      "type": "registry:lib"
    }
  ]
}
