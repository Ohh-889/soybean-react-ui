{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "alert",
  "type": "registry:block",
  "title": "Alert",
  "dependencies": ["@radix-ui/react-slot"],
  "registryDependencies": ["https://ui-play.skyroc.me/r/style.json"],
  "files": [
    {
      "path": "src/components/alert/Alert.tsx",
      "content": "'use client';\n\nimport { forwardRef } from 'react';\n\nimport { useComponentConfig } from '../config-provider/context';\n\nimport AlertUI from './AlertUI';\nimport type { AlertProps } from './types';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  const config = useComponentConfig('alert');\n\n  const mergedProps = {\n    ...config,\n    ...props\n  };\n\n  return (\n    <AlertUI\n      {...mergedProps}\n      ref={ref}\n    />\n  );\n});\n\nAlert.displayName = 'Alert';\n\nexport default Alert;\n",
      "type": "registry:ui",
      "target": "components/alert/Alert.tsx"
    },
    {
      "path": "src/components/alert/AlertDescription.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { alertVariants } from './alert-variants';\nimport type { AlertDescriptionProps } from './types';\n\nconst AlertDescription = forwardRef<HTMLDivElement, AlertDescriptionProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { description } = alertVariants({ size });\n\n  const mergedCls = cn(description(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nAlertDescription.displayName = 'AlertDescription';\n\nexport default AlertDescription;\n",
      "type": "registry:ui",
      "target": "components/alert/AlertDescription.tsx"
    },
    {
      "path": "src/components/alert/AlertRoot.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { alertVariants } from './alert-variants';\nimport type { AlertRootProps } from './types';\n\nconst AlertRoot = forwardRef<HTMLDivElement, AlertRootProps>((props, ref) => {\n  const { className, color, size, variant, ...rest } = props;\n\n  const { root } = alertVariants({ color, size, variant });\n\n  const mergedCls = cn(root(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      role=\"alert\"\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nAlertRoot.displayName = 'AlertRoot';\n\nexport default AlertRoot;\n",
      "type": "registry:ui",
      "target": "components/alert/AlertRoot.tsx"
    },
    {
      "path": "src/components/alert/AlertTitle.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { alertVariants } from './alert-variants';\nimport type { AlertTitleProps } from './types';\n\nconst AlertTitle = forwardRef<HTMLDivElement, AlertTitleProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { title } = alertVariants({ size });\n\n  const mergedCls = cn(title(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nAlertTitle.displayName = 'AlertTitle';\n\nexport default AlertTitle;\n",
      "type": "registry:ui",
      "target": "components/alert/AlertTitle.tsx"
    },
    {
      "path": "src/components/alert/AlertUI.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport AlertDescription from './AlertDescription';\nimport AlertRoot from './AlertRoot';\nimport AlertTitle from './AlertTitle';\nimport AlertWrapper from './AlertWrapper';\nimport { alertVariants } from './alert-variants';\nimport type { AlertProps } from './types';\n\nconst Alert = forwardRef<HTMLDivElement, AlertProps>((props, ref) => {\n  const {\n    children,\n    className,\n    classNames,\n    color,\n    description,\n    icon,\n    leading,\n    size,\n    title,\n    trailing,\n    variant,\n    ...rest\n  } = props;\n\n  const { icon: iconCls } = alertVariants({ color, size, variant });\n\n  const mergedCls = cn(iconCls(), classNames?.icon);\n  return (\n    <AlertRoot\n      className={className || classNames?.root}\n      color={color}\n      size={size}\n      variant={variant}\n      {...rest}\n      ref={ref}\n    >\n      {leading}\n      <Slot className={mergedCls}>{icon}</Slot>\n\n      <AlertWrapper\n        className={classNames?.wrapper}\n        size={size}\n      >\n        {title && (\n          <AlertTitle\n            className={classNames?.title}\n            size={size}\n          >\n            {title}\n          </AlertTitle>\n        )}\n\n        {description && (\n          <AlertDescription\n            className={classNames?.description}\n            size={size}\n          >\n            {description}\n          </AlertDescription>\n        )}\n\n        {children}\n      </AlertWrapper>\n\n      {trailing}\n    </AlertRoot>\n  );\n});\n\nAlert.displayName = 'Alert';\n\nexport default Alert;\n",
      "type": "registry:ui",
      "target": "components/alert/AlertUI.tsx"
    },
    {
      "path": "src/components/alert/AlertWrapper.tsx",
      "content": "import { forwardRef } from 'react';\n\nimport { cn } from '@/lib/utils';\n\nimport { alertVariants } from './alert-variants';\nimport type { AlertWrapperProps } from './types';\n\nconst AlertWrapper = forwardRef<HTMLDivElement, AlertWrapperProps>((props, ref) => {\n  const { className, size, ...rest } = props;\n\n  const { wrapper } = alertVariants({ size });\n\n  const mergedCls = cn(wrapper(), className);\n\n  return (\n    <div\n      className={mergedCls}\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n\nAlertWrapper.displayName = 'AlertWrapper';\n\nexport default AlertWrapper;\n",
      "type": "registry:ui",
      "target": "components/alert/AlertWrapper.tsx"
    },
    {
      "path": "src/components/alert/alert-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\nimport type { VariantProps } from 'tailwind-variants';\n\nexport const alertVariants = tv({\n  compoundVariants: [\n    {\n      class: {\n        close: 'text-primary-foreground',\n        icon: 'text-primary-foreground',\n        root: 'bg-primary text-primary-foreground'\n      },\n      color: 'primary',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-destructive-foreground',\n        icon: 'text-destructive-foreground',\n        root: 'bg-destructive text-destructive-foreground'\n      },\n      color: 'destructive',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-success-foreground',\n        icon: 'text-success-foreground',\n        root: 'bg-success text-success-foreground'\n      },\n      color: 'success',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-warning-foreground',\n        icon: 'text-warning-foreground',\n        root: 'bg-warning text-warning-foreground'\n      },\n      color: 'warning',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-info-foreground',\n        icon: 'text-info-foreground',\n        root: 'bg-info text-info-foreground'\n      },\n      color: 'info',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-carbon-foreground',\n        icon: 'text-carbon-foreground',\n        root: 'bg-carbon text-carbon-foreground'\n      },\n      color: 'carbon',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-secondary-foreground',\n        icon: 'text-secondary-foreground',\n        root: 'bg-secondary text-secondary-foreground'\n      },\n      color: 'secondary',\n      variant: 'solid'\n    },\n    {\n      class: {\n        close: 'text-accent-foreground',\n        icon: 'text-accent-foreground',\n        root: 'bg-accent text-accent-foreground'\n      },\n      color: 'accent',\n      variant: 'solid'\n    },\n    {\n      class: {\n        root: 'bg-primary/10'\n      },\n      color: 'primary',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-destructive/10'\n      },\n      color: 'destructive',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-success/10'\n      },\n      color: 'success',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-warning/10'\n      },\n      color: 'warning',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-info/10'\n      },\n      color: 'info',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-carbon/10'\n      },\n      color: 'carbon',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-secondary-foreground/5'\n      },\n      color: 'secondary',\n      variant: ['soft', 'ghost']\n    },\n    {\n      class: {\n        root: 'bg-accent-foreground/5'\n      },\n      color: 'accent',\n      variant: ['soft', 'ghost']\n    }\n  ],\n  defaultVariants: {\n    color: 'primary',\n    size: 'md',\n    variant: 'ghost'\n  },\n  slots: {\n    action: 'shrink-0',\n    close: 'absolute',\n    description: '[&_p]:leading-relaxed',\n    icon: 'shrink-0',\n    root: 'relative flex w-full rounded-lg border',\n    title: 'font-medium tracking-tight',\n    wrapper: 'flex-1 flex flex-col'\n  },\n  variants: {\n    color: {\n      accent: {\n        icon: 'text-accent-foreground',\n        root: 'border-accent-foreground/50 text-accent-foreground'\n      },\n      carbon: {\n        icon: 'text-carbon',\n        root: 'border-carbon text-carbon'\n      },\n      destructive: {\n        icon: 'text-destructive',\n        root: 'border-destructive text-destructive'\n      },\n      info: {\n        icon: 'text-info',\n        root: 'border-info text-info'\n      },\n      primary: {\n        icon: 'text-primary',\n        root: 'border-primary text-primary'\n      },\n      secondary: {\n        icon: 'text-secondary-foreground',\n        root: 'border-secondary-foreground/50 text-secondary-foreground'\n      },\n      success: {\n        icon: 'text-success',\n        root: 'border-success text-success'\n      },\n      warning: {\n        icon: 'text-warning',\n        root: 'border-warning text-warning'\n      }\n    },\n    size: {\n      '2xl': {\n        close: 'top-4 right-7',\n        root: 'gap-4.5 px-7 py-4.5 text-xl',\n        title: 'text-2xl leading-6.25',\n        wrapper: 'gap-2'\n      },\n      lg: {\n        close: 'top-3 right-5',\n        root: 'gap-3.5 px-5 py-3.5 text-base',\n        title: 'text-lg leading-5',\n        wrapper: 'gap-1.25'\n      },\n      md: {\n        close: 'top-2.5 right-4',\n        root: 'gap-3 px-4 py-3 text-sm',\n        title: 'text-base leading-[calc(var(--spacing)*4.375)]',\n        wrapper: 'gap-1'\n      },\n      sm: {\n        close: 'top-2 right-3',\n        root: 'gap-2.5 px-3 py-2.5 text-xs',\n        title: 'text-sm leading-3.75',\n        wrapper: 'gap-1'\n      },\n      xl: {\n        close: 'top-3.5 right-6',\n        root: 'gap-4 px-6 py-4 text-lg',\n        title: 'text-xl leading-[var(--spacing)*5.625]',\n        wrapper: 'gap-1.5'\n      },\n      xs: {\n        close: 'top-1.25 right-2',\n        root: 'gap-2 px-2 py-1.75 text-2xs',\n        title: 'text-xs leading-[calc(var(--spacing)*3.125)]',\n        wrapper: 'gap-0.75'\n      }\n    },\n    variant: {\n      ghost: {\n        root: ''\n      },\n      outline: {\n        root: 'bg-background'\n      },\n      pure: {\n        root: 'bg-background text-foreground border-border'\n      },\n      soft: {\n        root: 'border-0'\n      },\n      solid: {\n        root: ''\n      }\n    }\n  }\n});\n\ntype AlertVariants = VariantProps<typeof alertVariants>;\n\nexport type AlertVariant = NonNullable<AlertVariants['variant']>;\n\nexport type AlertSlots = keyof typeof alertVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/alert/alert-variants.ts"
    },
    {
      "path": "src/components/alert/index.ts",
      "content": "export { default as Alert } from './Alert';\nexport { default as AlertDescription } from './AlertDescription';\nexport { default as AlertRoot } from './AlertRoot';\nexport { default as AlertTitle } from './AlertTitle';\nexport { default as AlertWrapper } from './AlertWrapper';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/alert/index.ts"
    },
    {
      "path": "src/components/alert/types.ts",
      "content": "import type { BaseNodeProps, ClassValue, PropsSlot, ThemeColor } from '@/types/other';\n\nimport type { AlertSlots, AlertVariant } from './alert-variants';\n\nexport type AlertDescriptionProps = BaseNodeProps<React.ComponentProps<'div'>>;\n\nexport interface AlertRootProps extends BaseNodeProps<React.ComponentProps<'div'>> {\n  color?: ThemeColor;\n  variant?: AlertVariant;\n}\n\nexport type AlertTitleProps = BaseNodeProps<React.ComponentProps<'div'>>;\n\nexport type AlertWrapperProps = BaseNodeProps<React.ComponentProps<'div'>>;\n\nexport type AlertIconProps = BaseNodeProps<React.ComponentProps<'div'>> & {\n  color?: ThemeColor;\n};\n\nexport type AlertCloseProps = BaseNodeProps<React.ComponentProps<'button'>>;\n\nexport type AlertClassNames = Partial<Record<AlertSlots, ClassValue>>;\n\nexport interface AlertProps extends Omit<AlertRootProps, 'title'>, PropsSlot {\n  classNames?: AlertClassNames;\n  description?: React.ReactNode;\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n}\n\nexport type { AlertVariant };\n",
      "type": "registry:ui",
      "target": "components/alert/types.ts"
    }
  ]
}
