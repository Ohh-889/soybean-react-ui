{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "resizable",
  "type": "registry:block",
  "title": "Resizable",
  "registryDependencies": ["https://ui-play.skyroc.me/r/style.json"],
  "files": [
    {
      "path": "src/components/resizable/ResizableHandle.tsx",
      "content": "import { Slot } from '@radix-ui/react-slot';\nimport { GripVertical } from 'lucide-react';\nimport { PanelResizeHandle } from 'react-resizable-panels';\n\nimport { cn } from '@/lib/utils';\n\nimport { resizableVariants } from './resizable-variants';\nimport type { ResizableHandleProps } from './types';\n\nconst ResizableHandle = (props: ResizableHandleProps) => {\n  const { children, className, classNames, size, withHandle, ...rest } = props;\n\n  const { handle, handleIcon, handleIconRoot } = resizableVariants({ size });\n\n  const mergedCls = {\n    handle: cn(handle(), className),\n    handleIcon: cn(handleIcon(), classNames?.handleIcon),\n    handleIconRoot: cn(handleIconRoot(), classNames?.handleIconRoot)\n  };\n\n  return (\n    <PanelResizeHandle\n      className={mergedCls.handle}\n      {...rest}\n    >\n      {withHandle && (\n        <div className={mergedCls.handleIconRoot}>\n          <Slot className={mergedCls.handleIcon}>{children || <GripVertical />}</Slot>\n        </div>\n      )}\n    </PanelResizeHandle>\n  );\n};\n\nexport default ResizableHandle;\n",
      "type": "registry:ui",
      "target": "components/resizable/ResizableHandle.tsx"
    },
    {
      "path": "src/components/resizable/ResizablePanelGroup.tsx",
      "content": "'use client';\n\nimport { PanelGroup } from 'react-resizable-panels';\n\nimport { cn } from '@/lib/utils';\n\nimport { resizableVariants } from './resizable-variants';\nimport type { ResizablePanelGroupProps } from './types';\n\nconst ResizablePanelGroup = (props: ResizablePanelGroupProps) => {\n  const { className, size, ...rest } = props;\n\n  const { panelGroup } = resizableVariants({ size });\n\n  const mergedCls = cn(panelGroup(), className);\n\n  return (\n    <PanelGroup\n      className={mergedCls}\n      {...rest}\n    />\n  );\n};\n\nexport default ResizablePanelGroup;\n",
      "type": "registry:ui",
      "target": "components/resizable/ResizablePanelGroup.tsx"
    },
    {
      "path": "src/components/resizable/index.ts",
      "content": "'use client';\n\nexport { Panel as ResizablePanel } from 'react-resizable-panels';\n\nexport { default as ResizableHandle } from './ResizableHandle';\n\nexport { default as ResizablePanelGroup } from './ResizablePanelGroup';\n\nexport * from './types';\n",
      "type": "registry:ui",
      "target": "components/resizable/index.ts"
    },
    {
      "path": "src/components/resizable/resizable-variants.ts",
      "content": "import { tv } from 'tailwind-variants';\n\nexport const resizableVariants = tv({\n  defaultVariants: {\n    size: 'md'\n  },\n  slots: {\n    handle: [\n      'relative flex w-px items-center justify-center bg-border',\n      'after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2',\n      'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-background focus-visible:ring-primary',\n      ' data-[panel-group-direction=vertical]:h-px  data-[panel-group-direction=vertical]:w-full',\n      ' data-[panel-group-direction=vertical]:after:left-0  data-[panel-group-direction=vertical]:after:h-1  data-[panel-group-direction=vertical]:after:w-full  data-[panel-group-direction=vertical]:after:-translate-y-1  data-[panel-group-direction=vertical]:after:translate-x-0',\n      '[&[data-panel-group-direction=vertical]>div]:rotate-90'\n    ],\n    handleIcon: '',\n    handleIconRoot: 'z-2 flex items-center justify-center rounded-sm border bg-border',\n    panelGroup: 'flex h-full w-full data-[panel-group-direction=vertical]:flex-col'\n  },\n  variants: {\n    size: {\n      '2xl': {\n        handleIconRoot: 'w-4.5 h-6',\n        panelGroup: 'text-xl'\n      },\n      lg: {\n        handleIconRoot: 'w-3.5 h-4.5',\n        panelGroup: 'text-base'\n      },\n      md: {\n        handleIconRoot: 'w-3 h-4',\n        panelGroup: 'text-sm'\n      },\n      sm: {\n        handleIconRoot: 'w-2.5 h-3.25',\n        panelGroup: 'text-xs'\n      },\n      xl: {\n        handleIconRoot: 'w-4 h-5.25',\n        panelGroup: 'text-lg'\n      },\n      xs: {\n        handleIconRoot: 'w-2 h-2.625',\n        panelGroup: 'text-2xs'\n      }\n    }\n  }\n});\n\nexport type ResizableSlots = keyof typeof resizableVariants.slots;\n",
      "type": "registry:ui",
      "target": "components/resizable/resizable-variants.ts"
    },
    {
      "path": "src/components/resizable/types.ts",
      "content": "import type { ComponentProps } from 'react';\n// eslint-disable-next-line sort-imports\nimport type { PanelGroupProps as _PanelGroupProps, PanelResizeHandle } from 'react-resizable-panels';\n\nimport type { BaseNodeProps, ClassValue } from '@/types/other';\n\nimport type { ResizableSlots } from './resizable-variants';\n\nexport type ResizableClassNames = Partial<Record<ResizableSlots, ClassValue>>;\n\nexport interface ResizableHandleProps extends BaseNodeProps<ComponentProps<typeof PanelResizeHandle>> {\n  classNames?: Pick<ResizableClassNames, 'handleIcon' | 'handleIconRoot'>;\n  withHandle?: boolean;\n}\n\nexport interface ResizablePanelGroupProps extends BaseNodeProps<_PanelGroupProps> {}\n",
      "type": "registry:ui",
      "target": "components/resizable/types.ts"
    }
  ]
}
